import type { Diagnostic } from "./diagnostics";
export const Diagnostics = {
    _0_or_1_: { code: 0, message: "{0} or {1}" } as Diagnostic,
    Constant_expected: { code: 1000, message: "Constant expected" } as Diagnostic,
    _0_expected: { code: 1001, message: "{0} expected" } as Diagnostic,
    Unexpected_token_0_: { code: 1002, message: "Unexpected token {0}" } as Diagnostic,
    Invalid_character: { code: 1003, message: "Invalid character" } as Diagnostic,
    Unterminated_string_literal: { code: 1004, message: "Unterminated string literal" } as Diagnostic,
    Invalid_escape_sequence: { code: 1005, message: "Invalid escape sequence" } as Diagnostic,
    Digit_expected: { code: 1006, message: "Digit expected" } as Diagnostic,
    Production_expected: { code: 1007, message: "Production expected" } as Diagnostic,
    Unterminated_identifier_literal: { code: 1008, message: "Unterminated identifier literal" } as Diagnostic,
    Obsolete_0_: { code: 1009, message: "Obsolete: {0}", warning: true } as Diagnostic,
    HTML_trivia_not_allowed_here: { code: 1010, message: "HTML trivia not allowed here" } as Diagnostic,
    Unicode_code_point_literals_must_have_at_least_four_hexadecimal_digits: { code: 1011, message: "Unicode code point literals must have at least four hexadecimal digits" } as Diagnostic,
    Unicode_code_point_literals_with_more_than_four_digits_may_not_have_leading_zeros: { code: 1012, message: "Unicode code point literals with more than four digits may not have leading zeros" } as Diagnostic,
    Unicode_code_point_literals_should_use_uppercase_U_prefix: { code: 1013, message: "Unicode code point literals should use uppercase 'U+' prefix", warning: true } as Diagnostic,
    Unicode_code_point_literals_should_use_uppercase_hexadecimal_digits: { code: 1014, message: "Unicode code point literals should use uppercase hexadecimal digits", warning: true } as Diagnostic,
    Unicode_code_point_literal_value_is_outside_of_the_allowed_range: { code: 1015, message: "Unicode code point literal value is outside of the allowed range" } as Diagnostic,
    Unicode_character_name_literal_may_not_start_with_U_unless_it_is_a_valid_code_point: { code: 1016, message: "Unicode character name literal may not start with 'U+' unless it is a valid code point" } as Diagnostic,
    Unicode_character_name_literal_that_includes_a_code_point_must_have_a_description: { code: 1017, message: "Unicode character name literal that includes a code point must have a description" } as Diagnostic,
    Unicode_character_name_literal_code_point_and_description_must_be_separated_by_whitespace: { code: 1018, message: "Unicode character name literal code point and description must be separated by whitespace" } as Diagnostic,
    Unicode_character_name_literal_code_point_description_may_only_contain_printable_ASCII_characters: { code: 1019, message: "Unicode character name literal code point description may only contain printable ASCII characters" } as Diagnostic,
    Unicode_character_name_literal_must_be_an_ASCII_identifier: { code: 1020, message: "Unicode character name literal must be an ASCII identifier" } as Diagnostic,
    Cannot_find_name_0_: { code: 2000, message: "Cannot find name: '{0}'" } as Diagnostic,
    Duplicate_identifier_0_: { code: 2001, message: "Duplicate identifier: '{0}'" } as Diagnostic,
    Duplicate_terminal_0_: { code: 2002, message: "Duplicate terminal: `{0}`" } as Diagnostic,
    Argument_0_cannot_be_specified_multiple_times: { code: 2003, message: "Argument '{0}' cannot be specified multiple times" } as Diagnostic,
    Production_0_does_not_have_a_parameter_named_1_: { code: 2004, message: "Production '{0}' does not have a parameter named '{1}'" } as Diagnostic,
    Production_0_is_missing_parameter_1_All_definitions_of_production_0_must_specify_the_same_formal_parameters: { code: 2006, message: "Production '{0}' is missing parameter '{1}'. All definitions of production '{0}' must specify the same formal parameters" } as Diagnostic,
    There_is_no_argument_given_for_parameter_0_: { code: 2007, message: "There is no argument given for parameter '{0}'" } as Diagnostic,
    Parameter_0_is_unused: { code: 2008, message: "Parameter '{0}' is unused" } as Diagnostic,
};
