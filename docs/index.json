{
  "api/bind.html": {
    "href": "api/bind.html",
    "title": "Binder API | Grammarkdown API Reference",
    "keywords": "Binder API This section contains the various services Grammarkdown uses to bind Grammarkdown documents."
  },
  "api/check.html": {
    "href": "api/check.html",
    "title": "Checker API | Grammarkdown API Reference",
    "keywords": "Checker API This section contains the various services Grammarkdown uses to check Grammarkdown documents."
  },
  "api/compiler.html": {
    "href": "api/compiler.html",
    "title": "Compiler API | Grammarkdown API Reference",
    "keywords": "Compiler API The Compiler API provides the common services used to validate a Grammar . Related Links Grammar class CompilerOptions interface"
  },
  "api/emit.html": {
    "href": "api/emit.html",
    "title": "Emitter API | Grammarkdown API Reference",
    "keywords": "Emitter API This section contains the various services Grammarkdown uses for emit."
  },
  "api/grammarkdown.html": {
    "href": "api/grammarkdown.html",
    "title": "API Reference | Grammarkdown API Reference",
    "keywords": "Package grammarkdown grammarkdown has an API that can be consumed: var grammarkdown = require(\"grammarkdown\") , Grammar = grammarkdown.Grammar , EmitFormat = grammarkdown.EmitFormat var filename = \"...\"; var source = \"...\"; var output; // parse var grammar = new Grammar( [filename], { format: EmitFormat.markdown }, function () { return source; }); // bind (optional, bind happens automatically during check) grammar.bindSync(); // check (optional, check happens automatically during emit) grammar.checkSync(); // emit grammar.emitSync(undefined, function (file, text) { output = text; }); console.log(output); Classes Argument ArgumentList AssertionBase Binder BindingTable ButNotSymbol The ` <!-- --> but not <!-- --> ` operator allows you to reference a *Nonterminal* on the left, excluding some part of that production. A but not B Checker CommentTriviaBase Constraints Represents a set of constraints for a right-hand-side of a Production. Production[A] :: [+A] A [~A] B CoreAsyncHost A Host is a user-provided service that indicates how various Grammarkdown services can interact with a file system. The CoreAsyncHost class provides the API surface that Grammarkdown uses to interact with a host that is able to access the file system asynchronously. Define DiagnosticMessages EcmarkupEmitter Emitter EmptyAssertion Represents the empty assertion, which matches exactly zero tokens. [empty] Grammar The primary service used to interact with one or more Grammarkdown SourceFiles <!-- --> . GrammarkdownEmitter HtmlCloseTagTrivia Represents an HTML close-tag trivia token: Production :: <ins>Inserted</ins> <del>Deleted</del> HtmlCommentTrivia Represents an HTML comment trivia token: Production :: <!--before-->Nonterminal HtmlEmitter HtmlOpenTagTrivia Represents an HTML open-tag trivia token: Production :: <ins>Inserted</ins> <del>Deleted</del> HtmlTagTriviaBase HtmlTriviaBase Identifier Represents an identifier such as a Production or Parameter. Import InvalidAssertion InvalidSymbol LexicalGoalAssertion Represens a lexical-goal assertion which verifies that current lexical goal is the supplied *Nonterminal*. [lexical goal Module] LexicalSymbolBase Line LineMap LineOffsetMap LinkReference LookaheadAssertion Represents a lookahead assertion, which is a zero-width assertion that only matches if the next token is in the requested set. [lookahead ∉ { `class`, `let` }] MarkdownEmitter MetaElementBase MultiLineCommentTrivia Represents a multi-line comment trivia token. Node NodeAsyncHost NodeNavigator Navigates the syntax-tree of a SourceFile <!-- --> . NodeVisitor Nonterminal Represents a non-terminal reference to another Production. IdentifierReference[~Yield, ~Await] NoSymbolHereAssertion Represents a no Symbol here assertion, which disallows the provided symbol. [no LineTerminator here] NullDiagnosticMessages NumberLiteral Represents a number literal (used by @line <!-- --> ) @line 500 Production :: Nonterminal OneOfList OneOfSymbol Represents a set of symbols used to restrict a but not operator. A but not one of `a` or `b` OptionalSymbolBase Parameter ParameterList Parser PlaceholderSymbol Represents a placeholder symbol ( @ <!-- --> ) used in some grammars. PrimarySymbolBase Production ProductionBodyBase Prose Represents a section of Prose, which indicates handling of syntax outside the scope of the Grammarkdown parser. > This is a section of Prose with |Nonterminals| and `terminals` ProseAssertion Represents an assertion containing Prose, which indicates handling of syntax outside the scope of the Grammarkdown parser. HexDigits [> but only if MV of |HexDigits| > 0x10FFFF] ProseFragmentLiteral Resolver RightHandSide RightHandSideList Scanner SingleLineCommentTrivia Represent a single-line comment trivia token. // comment SourceElementBase SourceFile StringAsyncHost An implementation of a CoreAsyncHost to simplify creating a host for a single file. StringLiteral Represents a single- or double-quoted string literal (used by @import and @line <!-- --> ) @import \"file\" StringWriter Symbol SymbolSet Represents a set of symbols in a lookahead assertion. [lookahead ∈ { `a`, `b` }] SymbolSpan SymbolTable Terminal Represents a terminal token in the grammar. `yield` `*`? TerminalLiteral Represents a terminal token in the grammar. `yield` Token Represents a token such as a keyword or operator. TriviaBase UnicodeCharacterLiteral Represents a Unicode character literal in one of two forms: <TAB> U+0000 UnicodeCharacterRange Represents a range of unicode characters. U+0000 through U+001F Interfaces CompilerOptions Options that control the behavior of the compiler. CoreAsyncHostOptions Options used to configure a CoreAsyncHost <!-- --> . Diagnostic DiagnosticInfo LineInfo NodeAsyncHostOptions Position Range TextChange TextContent TextRange Enums CharacterCodes EmitFormat Indicates the emit output format. NewLineKind Indicates the token to use for line terminators during emit. SymbolKind SyntaxKind Functions decodeHtmlEntities(text) Declaration export declare function decodeHtmlEntities(text: string): string; Parameters text string Returns string forEachChild(node, cbNode) Declaration export declare function forEachChild<T>(node: Node | undefined, cbNode: (node: Node) => T | undefined): T | undefined; Type Parameters T Parameters node Node | undefined cbNode (node: Node ) => T | undefined Returns T | undefined formatList(tokens) Declaration export declare function formatList(tokens: (SyntaxKind | string)[]): string; Parameters tokens ( SyntaxKind | string)[] Returns string formatString(format, args) Declaration export declare function formatString(format: string, args?: any[]): string; Parameters format string args any[] Returns string formatString(format, args) Declaration export declare function formatString(format: string, ...args: any[]): string; Parameters format string args any[] Returns string getDefaultOptions() Gets the default options for the compiler. Declaration export declare function getDefaultOptions(): CompilerOptions; Returns CompilerOptions isAssertionKind(kind) Declaration export declare function isAssertionKind(kind: SyntaxKind): kind is AssertionKind; Parameters kind SyntaxKind Returns kind is AssertionKind isCommentTriviaKind(kind) Declaration export declare function isCommentTriviaKind(kind: SyntaxKind): kind is CommentTriviaKind; Parameters kind SyntaxKind Returns kind is CommentTriviaKind isHtmlTagTriviaKind(kind) Declaration export declare function isHtmlTagTriviaKind(kind: SyntaxKind): kind is HtmlTagTriviaKind; Parameters kind SyntaxKind Returns kind is HtmlTagTriviaKind isHtmlTriviaKind(kind) Declaration export declare function isHtmlTriviaKind(kind: SyntaxKind): kind is HtmlTriviaKind; Parameters kind SyntaxKind Returns kind is HtmlTriviaKind isKeywordKind(kind) Declaration export declare function isKeywordKind(kind: SyntaxKind): kind is KeywordKind; Parameters kind SyntaxKind Returns kind is KeywordKind isLexicalSymbolKind(kind) Declaration export declare function isLexicalSymbolKind(kind: SyntaxKind): kind is LexicalSymbolKind; Parameters kind SyntaxKind Returns kind is LexicalSymbolKind isMetaElementKind(kind) Declaration export declare function isMetaElementKind(kind: SyntaxKind): kind is MetaElementKind; Parameters kind SyntaxKind Returns kind is MetaElementKind isOptionalSymbolKind(kind) Declaration export declare function isOptionalSymbolKind(kind: SyntaxKind): kind is OptionalSymbolKind; Parameters kind SyntaxKind Returns kind is OptionalSymbolKind isPrimarySymbolKind(kind) Declaration export declare function isPrimarySymbolKind(kind: SyntaxKind): kind is PrimarySymbolKind; Parameters kind SyntaxKind Returns kind is PrimarySymbolKind isProductionBodyKind(kind) Declaration export declare function isProductionBodyKind(kind: SyntaxKind): kind is ProductionBodyKind; Parameters kind SyntaxKind Returns kind is ProductionBodyKind isProseFragmentKind(kind) Declaration export declare function isProseFragmentKind(kind: SyntaxKind): kind is ProseFragmentKind; Parameters kind SyntaxKind Returns kind is ProseFragmentKind isProseFragmentLiteralKind(kind) Declaration export declare function isProseFragmentLiteralKind(kind: SyntaxKind): kind is ProseFragmentLiteralKind; Parameters kind SyntaxKind Returns kind is ProseFragmentLiteralKind isPunctuationKind(kind) Declaration export declare function isPunctuationKind(kind: SyntaxKind): kind is PunctuationKind; Parameters kind SyntaxKind Returns kind is PunctuationKind isSourceElementKind(kind) Declaration export declare function isSourceElementKind(kind: SyntaxKind): kind is SourceElementKind; Parameters kind SyntaxKind Returns kind is SourceElementKind isTextContentKind(kind) Declaration export declare function isTextContentKind(kind: SyntaxKind): kind is TextContentKind; Parameters kind SyntaxKind Returns kind is TextContentKind isTokenKind(kind) Declaration export declare function isTokenKind(kind: SyntaxKind): kind is TokenKind; Parameters kind SyntaxKind Returns kind is TokenKind isTriviaKind(kind) Declaration export declare function isTriviaKind(kind: SyntaxKind): kind is TriviaKind; Parameters kind SyntaxKind Returns kind is TriviaKind scanHtmlTrivia(text, pos, end) Declaration export declare function scanHtmlTrivia(text: string, pos: number, end: number): HtmlTrivia[] | undefined; Parameters text string pos number end number Returns HtmlTrivia [] | undefined skipTrivia(text, pos, end, htmlTrivia, commentTrivia) Declaration export declare function skipTrivia(text: string, pos: number, end: number, htmlTrivia?: HtmlTrivia[], commentTrivia?: CommentTrivia[]): number; Parameters text string pos number end number htmlTrivia HtmlTrivia [] commentTrivia CommentTrivia [] Returns number stringToToken(text) Declaration export declare function stringToToken(text: string): SyntaxKind | undefined; Parameters text string Returns SyntaxKind | undefined tokenToString(kind, quoted) Declaration export declare function tokenToString(kind: SyntaxKind | string, quoted?: boolean): string; Parameters kind SyntaxKind | string quoted boolean Returns string Variables Diagnostics Declaration Diagnostics: { _0_or_1_: Diagnostic; Constant_expected: Diagnostic; _0_expected: Diagnostic; Unexpected_token_0_: Diagnostic; Invalid_character: Diagnostic; Unterminated_string_literal: Diagnostic; Invalid_escape_sequence: Diagnostic; Digit_expected: Diagnostic; Production_expected: Diagnostic; Unterminated_identifier_literal: Diagnostic; Obsolete_0_: Diagnostic; HTML_trivia_not_allowed_here: Diagnostic; Unicode_code_point_literals_must_have_at_least_four_hexadecimal_digits: Diagnostic; Unicode_code_point_literals_with_more_than_four_digits_may_not_have_leading_zeros: Diagnostic; Unicode_code_point_literals_should_use_uppercase_U_prefix: Diagnostic; Unicode_code_point_literals_should_use_uppercase_hexadecimal_digits: Diagnostic; Unicode_code_point_literal_value_is_outside_of_the_allowed_range: Diagnostic; Unicode_character_name_literal_may_not_start_with_U_unless_it_is_a_valid_code_point: Diagnostic; Unicode_character_name_literal_that_includes_a_code_point_must_have_a_description: Diagnostic; Unicode_character_name_literal_code_point_and_description_must_be_separated_by_whitespace: Diagnostic; Unicode_character_name_literal_code_point_description_may_only_contain_printable_ASCII_characters: Diagnostic; Unicode_character_name_literal_must_be_an_ASCII_identifier: Diagnostic; Cannot_find_name_0_: Diagnostic; Duplicate_identifier_0_: Diagnostic; Duplicate_terminal_0_: Diagnostic; Argument_0_cannot_be_specified_multiple_times: Diagnostic; Production_0_does_not_have_a_parameter_named_1_: Diagnostic; Production_0_is_missing_parameter_1_All_definitions_of_production_0_must_specify_the_same_formal_parameters: Diagnostic; There_is_no_argument_given_for_parameter_0_: Diagnostic; Parameter_0_is_unused: Diagnostic; } Type Aliases ArgumentOperatorKind Declaration export declare type ArgumentOperatorKind = SyntaxKind.QuestionToken | SyntaxKind.PlusToken | SyntaxKind.TildeToken; Assertion Declaration export declare type Assertion = EmptyAssertion | LookaheadAssertion | LexicalGoalAssertion | NoSymbolHereAssertion | ProseAssertion | InvalidAssertion; AssertionKind Declaration export declare type AssertionKind = SyntaxKind.EmptyAssertion | SyntaxKind.LookaheadAssertion | SyntaxKind.LexicalGoalAssertion | SyntaxKind.NoSymbolHereAssertion | SyntaxKind.ProseAssertion | SyntaxKind.InvalidAssertion; BooleanKind Declaration export declare type BooleanKind = SyntaxKind.TrueKeyword | SyntaxKind.FalseKeyword; CommentTrivia Declaration export declare type CommentTrivia = SingleLineCommentTrivia | MultiLineCommentTrivia; CommentTriviaKind Declaration export declare type CommentTriviaKind = SyntaxKind.SingleLineCommentTrivia | SyntaxKind.MultiLineCommentTrivia; Declaration Declaration export declare type Declaration = SourceFile | Production | Parameter; HtmlTagTriviaKind Declaration export declare type HtmlTagTriviaKind = SyntaxKind.HtmlOpenTagTrivia | SyntaxKind.HtmlCloseTagTrivia; HtmlTrivia Declaration export declare type HtmlTrivia = HtmlCommentTrivia | HtmlOpenTagTrivia | HtmlCloseTagTrivia; HtmlTriviaKind Declaration export declare type HtmlTriviaKind = SyntaxKind.HtmlCommentTrivia | SyntaxKind.HtmlOpenTagTrivia | SyntaxKind.HtmlCloseTagTrivia; KeywordKind Declaration export declare type KeywordKind = SyntaxKind.ButKeyword | SyntaxKind.DefaultKeyword | SyntaxKind.DefineKeyword | SyntaxKind.EmptyKeyword | SyntaxKind.FalseKeyword | SyntaxKind.GoalKeyword | SyntaxKind.HereKeyword | SyntaxKind.ImportKeyword | SyntaxKind.LexicalKeyword | SyntaxKind.LineKeyword | SyntaxKind.LookaheadKeyword | SyntaxKind.NoKeyword | SyntaxKind.NotKeyword | SyntaxKind.OfKeyword | SyntaxKind.OneKeyword | SyntaxKind.OrKeyword | SyntaxKind.ThroughKeyword | SyntaxKind.TrueKeyword; LexicalSymbol Declaration export declare type LexicalSymbol = PrimarySymbol | Assertion | PlaceholderSymbol | UnicodeCharacterRange | ButNotSymbol | Prose | OneOfSymbol | InvalidSymbol; LexicalSymbolKind Declaration export declare type LexicalSymbolKind = PrimarySymbolKind | AssertionKind | SyntaxKind.PlaceholderSymbol | SyntaxKind.UnicodeCharacterRange | SyntaxKind.ButNotSymbol | SyntaxKind.Prose | SyntaxKind.OneOfSymbol | SyntaxKind.InvalidSymbol; LookaheadOperatorKind Declaration export declare type LookaheadOperatorKind = SyntaxKind.EqualsToken | SyntaxKind.EqualsEqualsToken | SyntaxKind.ExclamationEqualsToken | SyntaxKind.NotEqualToToken | SyntaxKind.LessThanMinusToken | SyntaxKind.ElementOfToken | SyntaxKind.LessThanExclamationToken | SyntaxKind.NotAnElementOfToken; MetaElement Declaration export declare type MetaElement = Import | Define | Line; MetaElementKind Declaration export declare type MetaElementKind = SyntaxKind.Import | SyntaxKind.Define | SyntaxKind.Line; OptionalSymbol Declaration export declare type OptionalSymbol = Terminal | Nonterminal; OptionalSymbolKind Declaration export declare type OptionalSymbolKind = SyntaxKind.Terminal | SyntaxKind.Nonterminal; ParameterOperatorKind Declaration export declare type ParameterOperatorKind = SyntaxKind.PlusToken | SyntaxKind.TildeToken; PrimarySymbol Declaration export declare type PrimarySymbol = OptionalSymbol; PrimarySymbolKind Declaration export declare type PrimarySymbolKind = OptionalSymbolKind; ProductionBody Declaration export declare type ProductionBody = OneOfList | RightHandSide | RightHandSideList; ProductionBodyKind Declaration export declare type ProductionBodyKind = SyntaxKind.OneOfList | SyntaxKind.RightHandSide | SyntaxKind.RightHandSideList; ProductionSeperatorKind Declaration export declare type ProductionSeperatorKind = SyntaxKind.ColonToken | SyntaxKind.ColonColonToken | SyntaxKind.ColonColonColonToken; ProseFragment Declaration export declare type ProseFragment = ProseFragmentLiteral<ProseFragmentLiteralKind> | Terminal | Nonterminal; ProseFragmentKind Declaration export declare type ProseFragmentKind = ProseFragmentLiteralKind | SyntaxKind.Terminal | SyntaxKind.Nonterminal; ProseFragmentLiteralKind Declaration export declare type ProseFragmentLiteralKind = SyntaxKind.ProseFull | SyntaxKind.ProseHead | SyntaxKind.ProseMiddle | SyntaxKind.ProseTail; PunctuationKind Declaration export declare type PunctuationKind = SyntaxKind.AtToken | SyntaxKind.OpenBraceToken | SyntaxKind.CloseBraceToken | SyntaxKind.OpenBracketToken | SyntaxKind.OpenBracketGreaterThanToken | SyntaxKind.CloseBracketToken | SyntaxKind.GreaterThanToken | SyntaxKind.OpenParenToken | SyntaxKind.CloseParenToken | SyntaxKind.ColonToken | SyntaxKind.ColonColonToken | SyntaxKind.ColonColonColonToken | SyntaxKind.CommaToken | SyntaxKind.PlusToken | SyntaxKind.TildeToken | SyntaxKind.QuestionToken | SyntaxKind.EqualsToken | SyntaxKind.EqualsEqualsToken | SyntaxKind.ExclamationEqualsToken | SyntaxKind.LessThanExclamationToken | SyntaxKind.LessThanMinusToken | SyntaxKind.NotEqualToToken | SyntaxKind.ElementOfToken | SyntaxKind.NotAnElementOfToken; ReadFileCallback Asynchronously read a file from the host. Declaration export declare type ReadFileCallback = (this: void, file: string, cancelToken?: CancelToken) => PromiseLike<string | undefined> | string | undefined; SourceElement Declaration export declare type SourceElement = Production | MetaElement; SourceElementKind Declaration export declare type SourceElementKind = MetaElementKind | SyntaxKind.Production; TextContentKind Declaration export declare type TextContentKind = SyntaxKind.StringLiteral | SyntaxKind.NumberLiteral | SyntaxKind.TerminalLiteral | SyntaxKind.UnicodeCharacterLiteral | ProseFragmentLiteralKind | SyntaxKind.Identifier; TextContentNode Declaration export declare type TextContentNode = StringLiteral | NumberLiteral | Identifier | UnicodeCharacterLiteral | TerminalLiteral | ProseFragmentLiteral<ProseFragmentLiteralKind>; TokenKind Declaration export declare type TokenKind = SyntaxKind.EndOfFileToken | PunctuationKind | KeywordKind; Trivia Declaration export declare type Trivia = CommentTrivia | HtmlTrivia; TriviaKind Declaration export declare type TriviaKind = CommentTriviaKind | HtmlTriviaKind; WriteFileCallback Asynchronously write a file to the host. Declaration export declare type WriteFileCallback = (this: void, file: string, content: string, cancelToken?: CancelToken) => PromiseLike<void> | void; Namespaces Position Range TextChange"
  },
  "api/grammarkdown/argument.html": {
    "href": "api/grammarkdown/argument.html",
    "title": "Class Argument | Grammarkdown API Reference",
    "keywords": "Class Argument Package : grammarkdown Inheritance Node < SyntaxKind.Argument > Argument Constructors constructor(operatorToken, name) Constructs a new instance of the Argument class Declaration constructor(operatorToken: Token<ArgumentOperatorKind> | undefined, name: Identifier | undefined); Parameters operatorToken Token < ArgumentOperatorKind > | undefined name Identifier | undefined Properties edgeCount Declaration protected get edgeCount(): number; Property Value number firstChild Declaration get firstChild(): Node | undefined; Property Value Node | undefined lastChild Declaration get lastChild(): Node | undefined; Property Value Node | undefined name Declaration readonly name: Identifier | undefined; Property Value Identifier | undefined operatorToken Declaration readonly operatorToken: Token<ArgumentOperatorKind> | undefined; Property Value Token < ArgumentOperatorKind > | undefined Methods accept(visitor) Declaration protected accept(visitor: NodeVisitor): Argument; Parameters visitor NodeVisitor Returns Argument children() Declaration children(): IterableIterator<Node>; Returns IterableIterator < Node > edgeName(offset) Declaration protected edgeName(offset: number): string | undefined; Parameters offset number Returns string | undefined edgeValue(offset) Declaration protected edgeValue(offset: number): Node | ReadonlyArray<Node> | undefined; Parameters offset number Returns Node | ReadonlyArray < Node > | undefined forEachChild(cbNode) Declaration forEachChild<T>(cbNode: (node: Node) => T | undefined): T | undefined; Type Parameters T Parameters cbNode (node: Node ) => T | undefined Returns T | undefined update(name) Declaration update(name: Identifier | undefined): Argument; Parameters name Identifier | undefined Returns Argument"
  },
  "api/grammarkdown/argumentlist.html": {
    "href": "api/grammarkdown/argumentlist.html",
    "title": "Class ArgumentList | Grammarkdown API Reference",
    "keywords": "Class ArgumentList Package : grammarkdown Inheritance Node < SyntaxKind.ArgumentList > ArgumentList Constructors constructor(openParenToken, elements, closeParenToken) Constructs a new instance of the ArgumentList class Declaration constructor(openParenToken: Token<SyntaxKind.OpenBracketToken>, elements: ReadonlyArray<Argument> | undefined, closeParenToken: Token<SyntaxKind.CloseBracketToken> | undefined); Parameters openParenToken Token < SyntaxKind.OpenBracketToken > elements ReadonlyArray < Argument > | undefined closeParenToken Token < SyntaxKind.CloseBracketToken > | undefined Properties closeBracketToken Declaration readonly closeBracketToken: Token<SyntaxKind.CloseBracketToken> | undefined; Property Value Token < SyntaxKind.CloseBracketToken > | undefined edgeCount Declaration protected get edgeCount(): number; Property Value number elements Declaration readonly elements: ReadonlyArray<Argument> | undefined; Property Value ReadonlyArray < Argument > | undefined firstChild Declaration get firstChild(): Node | undefined; Property Value Node | undefined lastChild Declaration get lastChild(): Node | undefined; Property Value Node | undefined openBracketToken Declaration readonly openBracketToken: Token<SyntaxKind.OpenBracketToken>; Property Value Token < SyntaxKind.OpenBracketToken > Methods accept(visitor) Declaration protected accept(visitor: NodeVisitor): ArgumentList; Parameters visitor NodeVisitor Returns ArgumentList children() Declaration children(): IterableIterator<Node>; Returns IterableIterator < Node > edgeName(offset) Declaration protected edgeName(offset: number): string | undefined; Parameters offset number Returns string | undefined edgeValue(offset) Declaration protected edgeValue(offset: number): Node | ReadonlyArray<Node> | undefined; Parameters offset number Returns Node | ReadonlyArray < Node > | undefined forEachChild(cbNode) Declaration forEachChild<T>(cbNode: (node: Node) => T | undefined): T | undefined; Type Parameters T Parameters cbNode (node: Node ) => T | undefined Returns T | undefined update(elements) Declaration update(elements: ReadonlyArray<Argument> | undefined): ArgumentList; Parameters elements ReadonlyArray < Argument > | undefined Returns ArgumentList"
  },
  "api/grammarkdown/assertionbase.html": {
    "href": "api/grammarkdown/assertionbase.html",
    "title": "Class AssertionBase | Grammarkdown API Reference",
    "keywords": "Class AssertionBase Package : grammarkdown Inheritance LexicalSymbolBase <TKind> AssertionBase Constructors constructor(kind, openBracketToken, closeBracketToken) Constructs a new instance of the AssertionBase class Declaration constructor(kind: TKind, openBracketToken: Token<TBracket>, closeBracketToken: Token<SyntaxKind.CloseBracketToken> | undefined); Parameters kind TKind openBracketToken Token <TBracket> closeBracketToken Token < SyntaxKind.CloseBracketToken > | undefined Properties closeBracketToken Declaration readonly closeBracketToken: Token<SyntaxKind.CloseBracketToken> | undefined; Property Value Token < SyntaxKind.CloseBracketToken > | undefined firstChild Declaration get firstChild(): Node | undefined; Property Value Node | undefined lastChild Declaration abstract get lastChild(): Node | undefined; Property Value Node | undefined openBracketToken Declaration readonly openBracketToken: Token<TBracket>; Property Value Token <TBracket>"
  },
  "api/grammarkdown/binder.html": {
    "href": "api/grammarkdown/binder.html",
    "title": "Class Binder | Grammarkdown API Reference",
    "keywords": "Class Binder Package : grammarkdown Methods bindSourceFile(file, bindings, cancelable) Binds a SourceFile in the provided BindingTable <!-- --> . Declaration bindSourceFile(file: SourceFile, bindings: BindingTable, cancelable?: Cancelable): void; Parameters file SourceFile bindings BindingTable cancelable Cancelable Returns void"
  },
  "api/grammarkdown/bindingtable.html": {
    "href": "api/grammarkdown/bindingtable.html",
    "title": "Class BindingTable | Grammarkdown API Reference",
    "keywords": "Class BindingTable Package : grammarkdown Properties globals Declaration readonly globals: SymbolTable; Property Value SymbolTable isEmpty Gets a value indicating whether this BindingTable is empty. Declaration get isEmpty(): boolean; Property Value boolean Methods getAncestor(node, kind) Gets the nearest ancestor of node with the provided kind <!-- --> . Declaration getAncestor(node: Node | undefined, kind: SyntaxKind): Node | undefined; Parameters node Node | undefined kind SyntaxKind Returns Node | undefined getDeclarations(symbol) Gets the declarations for the provided symbol <!-- --> . Declaration getDeclarations(symbol: Symbol | undefined): (SourceFile | Production | Parameter)[]; Parameters symbol Symbol | undefined Returns ( SourceFile | Production | Parameter )[] getParent(node) Gets the parent of the provided Node <!-- --> . Declaration getParent(node: Node | undefined): Node | undefined; Parameters node Node | undefined Returns Node | undefined getReferences(symbol) Gets the references to the provided symbol <!-- --> . Declaration getReferences(symbol: Symbol | undefined): Node[]; Parameters symbol Symbol | undefined Returns Node [] getSourceFile(node) Gets the SourceFile containing node <!-- --> . Declaration getSourceFile(node: Node | undefined): SourceFile | undefined; Parameters node Node | undefined Returns SourceFile | undefined getSymbol(node) Gets the Symbol bound to node <!-- --> . Declaration getSymbol(node: Node | undefined): Symbol | undefined; Parameters node Node | undefined Returns Symbol | undefined hasParent(node) Returns whether the provided Node has a parent. Declaration hasParent(node: Node | undefined): boolean; Parameters node Node | undefined Returns boolean hasSymbol(node) Returns whether node has been bound to a Symbol <!-- --> . Declaration hasSymbol(node: Node | undefined): boolean; Parameters node Node | undefined Returns boolean resolveSymbol(location, name, meaning) Resolves a Symbol for the provided name at the given location that has the provided meaning <!-- --> . Declaration resolveSymbol(location: Node | undefined, name: string | undefined, meaning: SymbolKind): Symbol | undefined; Parameters location Node | undefined name string | undefined meaning SymbolKind Returns Symbol | undefined"
  },
  "api/grammarkdown/butnotsymbol.html": {
    "href": "api/grammarkdown/butnotsymbol.html",
    "title": "Class ButNotSymbol | Grammarkdown API Reference",
    "keywords": "Class ButNotSymbol Package : grammarkdown The ` <!-- --> but not <!-- --> ` operator allows you to reference a *Nonterminal* on the left, excluding some part of that production. A but not B Inheritance LexicalSymbolBase < SyntaxKind.ButNotSymbol > ButNotSymbol Constructors constructor(left, butKeyword, notKeyword, right) Constructs a new instance of the ButNotSymbol class Declaration constructor(left: LexicalSymbol, butKeyword: Token<SyntaxKind.ButKeyword> | undefined, notKeyword: Token<SyntaxKind.NotKeyword> | undefined, right: LexicalSymbol | undefined); Parameters left LexicalSymbol butKeyword Token < SyntaxKind.ButKeyword > | undefined notKeyword Token < SyntaxKind.NotKeyword > | undefined right LexicalSymbol | undefined Properties butKeyword Declaration readonly butKeyword: Token<SyntaxKind.ButKeyword> | undefined; Property Value Token < SyntaxKind.ButKeyword > | undefined edgeCount Declaration protected get edgeCount(): number; Property Value number firstChild Declaration get firstChild(): Node | undefined; Property Value Node | undefined lastChild Declaration get lastChild(): Node | undefined; Property Value Node | undefined left Declaration readonly left: LexicalSymbol; Property Value LexicalSymbol notKeyword Declaration readonly notKeyword: Token<SyntaxKind.NotKeyword> | undefined; Property Value Token < SyntaxKind.NotKeyword > | undefined right Declaration readonly right: LexicalSymbol | undefined; Property Value LexicalSymbol | undefined Methods accept(visitor) Declaration protected accept(visitor: NodeVisitor): ButNotSymbol; Parameters visitor NodeVisitor Returns ButNotSymbol children() Declaration children(): IterableIterator<Node>; Returns IterableIterator < Node > edgeName(offset) Declaration protected edgeName(offset: number): string | undefined; Parameters offset number Returns string | undefined edgeValue(offset) Declaration protected edgeValue(offset: number): Node | ReadonlyArray<Node> | undefined; Parameters offset number Returns Node | ReadonlyArray < Node > | undefined forEachChild(cbNode) Declaration forEachChild<T>(cbNode: (node: Node) => T | undefined): T | undefined; Type Parameters T Parameters cbNode (node: Node ) => T | undefined Returns T | undefined update(left, right) Declaration update(left: LexicalSymbol, right: LexicalSymbol | undefined): ButNotSymbol; Parameters left LexicalSymbol right LexicalSymbol | undefined Returns ButNotSymbol"
  },
  "api/grammarkdown/charactercodes.html": {
    "href": "api/grammarkdown/charactercodes.html",
    "title": "Enum CharacterCodes | Grammarkdown API Reference",
    "keywords": "Enum CharacterCodes Package : grammarkdown Fields Name Value Description Ampersand 38 Asterisk 42 At 64 Backslash 92 Backspace 8 Backtick 96 Bar 124 ByteOrderMark 65279 CarriageReturn 13 CloseBrace 125 CloseBracket 93 CloseParen 41 Colon 58 Comma 44 Dot 46 DoubleQuote 34 ElementOf 8712 EmQuad 8193 EmSpace 8195 EnQuad 8192 EnSpace 8194 Equals 61 Exclamation 33 FigureSpace 8199 FormFeed 12 FourPerEmSpace 8197 GreaterThan 62 HairSpace 8202 Hash 35 IdeographicSpace 12288 LessThan 60 LineFeed 10 LineSeparator 8232 LowerA 97 LowerB 98 LowerC 99 LowerD 100 LowerE 101 LowerF 102 LowerG 103 LowerH 104 LowerI 105 LowerJ 106 LowerK 107 LowerL 108 LowerM 109 LowerN 110 LowerO 111 LowerP 112 LowerQ 113 LowerR 114 LowerS 115 LowerT 116 LowerU 117 LowerV 118 LowerW 119 LowerX 120 LowerY 121 LowerZ 122 MathematicalSpace 8287 MaxAsciiCharacter 127 Minus 45 NarrowNoBreakSpace 8239 NextLine 133 NonBreakingSpace 160 NotAnElementOf 8713 NotEqualTo 8800 NullCharacter 0 Number0 48 Number1 49 Number2 50 Number3 51 Number4 52 Number5 53 Number6 54 Number7 55 Number8 56 Number9 57 NumberSign 35 Ogham 5760 OpenBrace 123 OpenBracket 91 OpenParen 40 ParagraphSeparator 8233 Plus 43 PunctuationSpace 8200 Question 63 Semicolon 59 SingleQuote 39 SixPerEmSpace 8198 Slash 47 Space 32 Tab 9 ThinSpace 8201 ThreePerEmSpace 8196 Tilde 126 Underscore 95 UpperA 65 UpperB 66 UpperC 67 UpperD 68 UpperE 69 UpperF 70 UpperG 71 UpperH 72 UpperI 73 UpperJ 74 UpperK 75 UpperL 76 UpperM 77 UpperN 78 UpperO 79 UpperP 80 UpperQ 81 UpperR 82 UpperS 83 UpperT 84 UpperU 85 UpperV 86 UpperW 87 UpperX 88 UpperY 89 UpperZ 90 VerticalTab 11 ZeroWidthSpace 8203"
  },
  "api/grammarkdown/checker.html": {
    "href": "api/grammarkdown/checker.html",
    "title": "Class Checker | Grammarkdown API Reference",
    "keywords": "Class Checker Package : grammarkdown Constructors constructor(options, lineOffsetMap) Constructs a new instance of the Checker class Declaration constructor(options?: CompilerOptions, lineOffsetMap?: LineOffsetMap); Parameters options CompilerOptions lineOffsetMap LineOffsetMap Methods checkSourceFile(sourceFile, bindings, diagnostics, cancelable) Declaration checkSourceFile(sourceFile: SourceFile, bindings: BindingTable, diagnostics: DiagnosticMessages, cancelable?: Cancelable): void; Parameters sourceFile SourceFile bindings BindingTable diagnostics DiagnosticMessages cancelable Cancelable Returns void"
  },
  "api/grammarkdown/commenttriviabase.html": {
    "href": "api/grammarkdown/commenttriviabase.html",
    "title": "Class CommentTriviaBase | Grammarkdown API Reference",
    "keywords": "Class CommentTriviaBase Package : grammarkdown Inheritance TriviaBase <TKind> CommentTriviaBase"
  },
  "api/grammarkdown/compileroptions.html": {
    "href": "api/grammarkdown/compileroptions.html",
    "title": "Interface CompilerOptions | Grammarkdown API Reference",
    "keywords": "Interface CompilerOptions Package : grammarkdown Options that control the behavior of the compiler. Properties diagnostics Indicates whether internal diagnostic information should be reported to the console. Declaration diagnostics?: boolean; Property Value boolean emitLinks Indicates whether to include hyperlinks in the emit output. Declaration emitLinks?: boolean; Property Value boolean format Indicates the emit output format. Declaration format?: EmitFormat; Property Value EmitFormat newLine Indicates the token to use for line terminators during emit. Declaration newLine?: NewLineKind; Property Value NewLineKind noChecks Indicates that diagnostics should not be reported. Declaration noChecks?: boolean; Property Value boolean noEmit Indicates that emit output should not be produced. Declaration noEmit?: boolean; Property Value boolean noEmitOnError Indicates that emit output should not be produced if any diagnostics are reported. Declaration noEmitOnError?: boolean; Property Value boolean noStrictParametricProductions Disables strict checking of production parameters. Declaration noStrictParametricProductions?: boolean; Property Value boolean noUnusedParameters Indicates that diagnostics should be produced if production parameters are unused. Declaration noUnusedParameters?: boolean; Property Value boolean out Indicates the file path for emit output. Declaration out?: string; Property Value string"
  },
  "api/grammarkdown/constraints.html": {
    "href": "api/grammarkdown/constraints.html",
    "title": "Class Constraints | Grammarkdown API Reference",
    "keywords": "Class Constraints Package : grammarkdown Represents a set of constraints for a right-hand-side of a Production. Production[A] :: [+A] A [~A] B Inheritance Node < SyntaxKind.Constraints > Constraints Constructors constructor(openBracketToken, elements, closeBracketToken) Constructs a new instance of the Constraints class Declaration constructor(openBracketToken: Token<SyntaxKind.OpenBracketToken>, elements: ReadonlyArray<Argument> | undefined, closeBracketToken: Token<SyntaxKind.CloseBracketToken> | undefined); Parameters openBracketToken Token < SyntaxKind.OpenBracketToken > elements ReadonlyArray < Argument > | undefined closeBracketToken Token < SyntaxKind.CloseBracketToken > | undefined Properties closeBracketToken Declaration readonly closeBracketToken: Token<SyntaxKind.CloseBracketToken> | undefined; Property Value Token < SyntaxKind.CloseBracketToken > | undefined edgeCount Declaration protected get edgeCount(): number; Property Value number elements Declaration readonly elements: ReadonlyArray<Argument> | undefined; Property Value ReadonlyArray < Argument > | undefined firstChild Declaration get firstChild(): Node | undefined; Property Value Node | undefined lastChild Declaration get lastChild(): Node | undefined; Property Value Node | undefined openBracketToken Declaration readonly openBracketToken: Token<SyntaxKind.OpenBracketToken>; Property Value Token < SyntaxKind.OpenBracketToken > Methods accept(visitor) Declaration protected accept(visitor: NodeVisitor): Constraints; Parameters visitor NodeVisitor Returns Constraints children() Declaration children(): IterableIterator<Node>; Returns IterableIterator < Node > edgeName(offset) Declaration protected edgeName(offset: number): string | undefined; Parameters offset number Returns string | undefined edgeValue(offset) Declaration protected edgeValue(offset: number): Node | ReadonlyArray<Node> | undefined; Parameters offset number Returns Node | ReadonlyArray < Node > | undefined forEachChild(cbNode) Declaration forEachChild<T>(cbNode: (node: Node) => T | undefined): T | undefined; Type Parameters T Parameters cbNode (node: Node ) => T | undefined Returns T | undefined update(elements) Declaration update(elements: ReadonlyArray<Argument> | undefined): Constraints; Parameters elements ReadonlyArray < Argument > | undefined Returns Constraints"
  },
  "api/grammarkdown/coreasynchost.html": {
    "href": "api/grammarkdown/coreasynchost.html",
    "title": "Class CoreAsyncHost | Grammarkdown API Reference",
    "keywords": "Class CoreAsyncHost Package : grammarkdown A Host is a user-provided service that indicates how various Grammarkdown services can interact with a file system. The CoreAsyncHost class provides the API surface that Grammarkdown uses to interact with a host that is able to access the file system asynchronously. Examples The following example shows how you can create a CoreAsyncHost from a Map : JavaScript const files = new Map([ [\"a.grammar\", \"...\"], [\"b.grammar\", \"...\"] ]); const host = new CoreAsyncHost({ ignoreCase: false, useBuiltinGrammers: false, resolveFile: file => file, readFile: file => files.get(file) }); Constructors constructor(options, hostFallback) Constructs a new instance of the CoreAsyncHost class Declaration constructor(options: CoreAsyncHostOptions, hostFallback?: CoreAsyncHost); Parameters options CoreAsyncHostOptions The options used to configure the host. hostFallback CoreAsyncHost An optional host to use as a fallback for operations not supported by this host. Properties ignoreCase Indicates whether comparisons for this host should be case insensitive. Declaration get ignoreCase(): boolean; Property Value boolean parser Gets the parser instance associated with this host. Declaration protected get parser(): Parser; Property Value Parser Methods createParser() Creates a Parser for this host. Declaration /** @virtual */ protected createParser(): Parser; Returns Parser | Improve this Doc forFile(content, file, hostFallback) Creates a StringAsyncHost for the provided content. Declaration static forFile(content: PromiseLike<string> | string, file?: string, hostFallback?: CoreAsyncHost): StringAsyncHost; Parameters content PromiseLike <string> | string The content of the file. file string The file name for the content. hostFallback CoreAsyncHost An optional host to use as a fallback for operations not supported by this host. Returns StringAsyncHost Examples The following example shows how you can create a CoreAsyncHost for a string : JavaScript const content = \"...\"; const host = CoreAsyncHost.forFile(content); from(custom, hostFallback) Creates a CoreAsyncHost <!-- --> . Declaration static from(custom: CoreAsyncHostOptions, hostFallback?: CoreAsyncHost): CoreAsyncHost; Parameters custom CoreAsyncHostOptions hostFallback CoreAsyncHost An optional host to use as a fallback for operations not supported by this host. Returns CoreAsyncHost getSourceFile(file, cancelable) Reads and parses a source file from the host. Declaration getSourceFile(file: string, cancelable?: Cancelable): Promise<SourceFile | undefined>; Parameters file string The path to the file. cancelable Cancelable A cancelable object that can be used to abort the operation. Returns Promise < SourceFile | undefined> A Promise for either the parsed SourceFile of the file if the file could be read, or undefined if it could not be read. normalizeFile(file) Normalize a file path's string representation for use as a key based on the case sensitivity of the host. Declaration normalizeFile(file: string): string; Parameters file string The file path. Returns string normalizeFileCore(file) When overridden in a derived class, normalizes a file path's string representation for use as a key based on the case sensitivity of the host. Declaration /** @virtual */ protected normalizeFileCore(file: string): string; Parameters file string The file path. Returns string parseSourceFile(file, text, cancelable) Parse a source file. Declaration parseSourceFile(file: string, text: string, cancelable?: Cancelable): SourceFile; Parameters file string The path to the source file. text string The text of the source file. cancelable Cancelable An optional cancelable object that can be used to abort a long-running parse. Returns SourceFile readFile(file, cancelable) Reads a file from the host. Declaration readFile(file: string, cancelable?: Cancelable): Promise<string | undefined>; Parameters file string The path to the file. cancelable Cancelable A cancelable object that can be used to abort the operation. Returns Promise <string | undefined> A Promise for either a string containing the content if the file could be read, or undefined if the file could not be read. readFileCore(file, cancelToken) When overridden in a derived class, reads a file from the host. Declaration /** @virtual */ protected readFileCore(file: string, cancelToken?: CancelToken): Promise<string | undefined>; Parameters file string The path to the file. cancelToken CancelToken A cancellation token that can be used by the caller to abort the operation. Returns Promise <string | undefined> A Promise for either a string containing the content if the file could be read, or undefined if the file could not be read. registerKnownGrammar(name, file) Registers a known grammar for use with @import directives. Declaration registerKnownGrammar(name: string, file: string): void; Parameters name string The name for the grammar. file string The file path of the grammar. Returns void registerKnownGrammarCore(name, file) When overridden in a derived clas, registers a known grammar for use with @import directives. Declaration /** @virtual */ protected registerKnownGrammarCore(name: string, file: string): void; Parameters name string The name for the grammar. file string The file path of the grammar. Returns void resolveFile(file, referrer) Resolve the full path of a file relative to the provided referrer. Declaration resolveFile(file: string, referrer?: string): string; Parameters file string The path to the requested file. referrer string An optional path indicating the file from which the path should be resolved. Returns string resolveFileCore(file, referrer) When overridden in a derived class, resolves the full path of a file relative to the provided referrer. Declaration /** @virtual */ protected resolveFileCore(file: string, referrer?: string): string; Parameters file string The path to the requested file. referrer string An optional path indicating the file from which the path should be resolved. Returns string resolveKnownGrammar(name) Returns the path for a known or built-in grammar based on its name (i.e., \"es2015\" <!-- --> , etc.) Declaration resolveKnownGrammar(name: string): string | undefined; Parameters name string The name of the grammar. Returns string | undefined resolveKnownGrammarCore(name) When overridden in a derived class, returns the path for a known or built-in grammar based on its name (i.e., \"es2015\" <!-- --> , etc.) Declaration /** @virtual */ protected resolveKnownGrammarCore(name: string): string | undefined; Parameters name string The name of the grammar. Returns string | undefined writeFile(file, text, cancelable) Writes a file to the host. Declaration writeFile(file: string, text: string, cancelable?: Cancelable): Promise<void>; Parameters file string The path to the file. text string The contents of the file. cancelable Cancelable A cancelable object that can be used to abort the operation. Returns Promise <void> A Promise that is settled when the operation completes. writeFileCore(file, content, cancelToken) When overridden in a derived class, writes a file to the host. Declaration /** @virtual */ protected writeFileCore(file: string, content: string, cancelToken?: CancelToken): Promise<void>; Parameters file string The path to the file. content string cancelToken CancelToken A cancellation token that can be used by the caller to abort the operation. Returns Promise <void> A Promise that is settled when the operation completes."
  },
  "api/grammarkdown/coreasynchostoptions.html": {
    "href": "api/grammarkdown/coreasynchostoptions.html",
    "title": "Interface CoreAsyncHostOptions | Grammarkdown API Reference",
    "keywords": "Interface CoreAsyncHostOptions Package : grammarkdown Options used to configure a CoreAsyncHost <!-- --> . Properties ignoreCase Indicates whether the host is case-insensitive ( true <!-- --> ) or case-sensitive ( false <!-- --> ). Declaration ignoreCase?: boolean; Property Value boolean knownGrammars A set of known grammars in the form { \"name\": \"path\" } Declaration knownGrammars?: Record<string, string>; Property Value Record <string, string> normalizeFile A callback used to control file normalization when generating keys for maps based on the case sensitivity of the host. Declaration normalizeFile?: (this: void, file: string, fallback: (file: string) => string) => string; Property Value (this: void, file: string, fallback: (file: string) => string) => string readFile A callback used to control asynchronous file reads. Declaration readFile?: (this: void, file: string, cancelToken: CancelToken | undefined, fallback: (file: string, cancelToken?: CancelToken) => Promise<string | undefined>) => PromiseLike<string | undefined> | string | undefined; Property Value (this: void, file: string, cancelToken: CancelToken | undefined, fallback: (file: string, cancelToken?: CancelToken ) => Promise <string | undefined>) => PromiseLike <string | undefined> | string | undefined resolveFile A callback used to control file resolution. Declaration resolveFile?: (this: void, file: string, referrer: string | undefined, fallback: (file: string, referrer?: string) => string) => string; Property Value (this: void, file: string, referrer: string | undefined, fallback: (file: string, referrer?: string) => string) => string resolveKnownGrammar A callback used to control known grammar resolution. Declaration resolveKnownGrammar?: (this: void, name: string, fallback: (name: string) => string | undefined) => string | undefined; Property Value (this: void, name: string, fallback: (name: string) => string | undefined) => string | undefined useBuiltinGrammars Indicates whether to include builtin grammars in the set of known grammars. Declaration useBuiltinGrammars?: boolean; Property Value boolean writeFile A callback used to control asynchronous file writes. Declaration writeFile?: (this: void, file: string, content: string, cancelToken: CancelToken | undefined, fallback: (file: string, content: string, cancelToken?: CancelToken) => Promise<void>) => PromiseLike<void> | void; Property Value (this: void, file: string, content: string, cancelToken: CancelToken | undefined, fallback: (file: string, content: string, cancelToken?: CancelToken ) => Promise <void>) => PromiseLike <void> | void"
  },
  "api/grammarkdown/define.html": {
    "href": "api/grammarkdown/define.html",
    "title": "Class Define | Grammarkdown API Reference",
    "keywords": "Class Define Package : grammarkdown Inheritance MetaElementBase < SyntaxKind.Define > Define Constructors constructor(atToken, defineKeyword, key, valueToken) Constructs a new instance of the Define class Declaration constructor(atToken: Token<SyntaxKind.AtToken>, defineKeyword: Token<SyntaxKind.DefineKeyword>, key: Identifier, valueToken: Token<BooleanKind> | Token<SyntaxKind.DefaultKeyword> | undefined); Parameters atToken Token < SyntaxKind.AtToken > defineKeyword Token < SyntaxKind.DefineKeyword > key Identifier valueToken Token < BooleanKind > | Token < SyntaxKind.DefaultKeyword > | undefined Properties defineKeyword Declaration readonly defineKeyword: Token<SyntaxKind.DefineKeyword>; Property Value Token < SyntaxKind.DefineKeyword > edgeCount Declaration protected get edgeCount(): number; Property Value number key Declaration readonly key: Identifier; Property Value Identifier lastChild Declaration get lastChild(): Node | undefined; Property Value Node | undefined valueToken Declaration readonly valueToken: Token<BooleanKind> | Token<SyntaxKind.DefaultKeyword> | undefined; Property Value Token < BooleanKind > | Token < SyntaxKind.DefaultKeyword > | undefined Methods accept(visitor) Declaration protected accept(visitor: NodeVisitor): Define; Parameters visitor NodeVisitor Returns Define children() Declaration children(): IterableIterator<Node>; Returns IterableIterator < Node > edgeName(offset) Declaration protected edgeName(offset: number): string | undefined; Parameters offset number Returns string | undefined edgeValue(offset) Declaration protected edgeValue(offset: number): Node | ReadonlyArray<Node> | undefined; Parameters offset number Returns Node | ReadonlyArray < Node > | undefined forEachChild(cbNode) Declaration forEachChild<T>(cbNode: (node: Node) => T | undefined): T | undefined; Type Parameters T Parameters cbNode (node: Node ) => T | undefined Returns T | undefined"
  },
  "api/grammarkdown/diagnostic.html": {
    "href": "api/grammarkdown/diagnostic.html",
    "title": "Interface Diagnostic | Grammarkdown API Reference",
    "keywords": "Interface Diagnostic Package : grammarkdown Properties code Declaration code: number; Property Value number message Declaration message: string; Property Value string warning Declaration warning?: boolean; Property Value boolean"
  },
  "api/grammarkdown/diagnosticinfo.html": {
    "href": "api/grammarkdown/diagnosticinfo.html",
    "title": "Interface DiagnosticInfo | Grammarkdown API Reference",
    "keywords": "Interface DiagnosticInfo Package : grammarkdown Properties code Declaration code: number; Property Value number diagnosticIndex Declaration diagnosticIndex: number; Property Value number filename Declaration filename: string | undefined; Property Value string | undefined formattedMessage Declaration formattedMessage?: string; Property Value string message Declaration message: string; Property Value string messageArguments Declaration messageArguments: any[] | undefined; Property Value any[] | undefined node Declaration node: Node | undefined; Property Value Node | undefined pos Declaration pos: number; Property Value number range Declaration range: Range | undefined; Property Value Range | undefined sourceFile Declaration sourceFile: SourceFile | undefined; Property Value SourceFile | undefined warning Declaration warning: boolean; Property Value boolean"
  },
  "api/grammarkdown/diagnosticmessages.html": {
    "href": "api/grammarkdown/diagnosticmessages.html",
    "title": "Class DiagnosticMessages | Grammarkdown API Reference",
    "keywords": "Class DiagnosticMessages Package : grammarkdown Constructors constructor(lineOffsetMap) Constructs a new instance of the DiagnosticMessages class Declaration constructor(lineOffsetMap?: LineOffsetMap); Parameters lineOffsetMap LineOffsetMap Properties size Declaration get size(): number; Property Value number Methods [Symbol.iterator]() Declaration [Symbol.iterator](): Generator<DiagnosticInfo | undefined, void, unknown>; Returns Generator < DiagnosticInfo | undefined, void, unknown> copyFrom(other) Declaration copyFrom(other: DiagnosticMessages): void; Parameters other DiagnosticMessages Returns void count() Declaration count(): number; Returns number forEach(callback) Declaration forEach(callback: (message: string, diagnosticIndex: number) => void): void; Parameters callback (message: string, diagnosticIndex: number) => void Returns void getDiagnostic(diagnosticIndex) Declaration getDiagnostic(diagnosticIndex: number): Diagnostic | undefined; Parameters diagnosticIndex number Returns Diagnostic | undefined getDiagnosticArguments(diagnosticIndex) Declaration getDiagnosticArguments(diagnosticIndex: number): any[] | undefined; Parameters diagnosticIndex number Returns any[] | undefined getDiagnosticFilename(diagnosticIndex, raw) Declaration getDiagnosticFilename(diagnosticIndex: number, raw?: boolean): string | undefined; Parameters diagnosticIndex number raw boolean Returns string | undefined getDiagnosticInfo(diagnosticIndex, options) Declaration getDiagnosticInfo(diagnosticIndex: number, options?: { formatMessage?: boolean; detailedMessage?: boolean; raw?: boolean; }): DiagnosticInfo | undefined; Parameters diagnosticIndex number options { formatMessage?: boolean; detailedMessage?: boolean; raw?: boolean; } Returns DiagnosticInfo | undefined getDiagnosticInfos(options) Declaration getDiagnosticInfos(options?: { formatMessage?: boolean; detailedMessage?: boolean; raw?: boolean; }): DiagnosticInfo[]; Parameters options { formatMessage?: boolean; detailedMessage?: boolean; raw?: boolean; } Returns DiagnosticInfo [] getDiagnosticInfosForSourceFile(sourceFile, options) Declaration getDiagnosticInfosForSourceFile(sourceFile: SourceFile, options?: { formatMessage?: boolean; detailedMessage?: boolean; raw?: boolean; }): DiagnosticInfo[]; Parameters sourceFile SourceFile options { formatMessage?: boolean; detailedMessage?: boolean; raw?: boolean; } Returns DiagnosticInfo [] getDiagnosticNode(diagnosticIndex) Declaration getDiagnosticNode(diagnosticIndex: number): Node | undefined; Parameters diagnosticIndex number Returns Node | undefined getDiagnosticPosition(diagnosticIndex, raw) Declaration getDiagnosticPosition(diagnosticIndex: number, raw?: boolean): Position | undefined; Parameters diagnosticIndex number raw boolean Returns Position | undefined getDiagnosticRange(diagnosticIndex, raw) Declaration getDiagnosticRange(diagnosticIndex: number, raw?: boolean): Range | undefined; Parameters diagnosticIndex number raw boolean Returns Range | undefined getDiagnosticSourceFile(diagnosticIndex) Declaration getDiagnosticSourceFile(diagnosticIndex: number): SourceFile | undefined; Parameters diagnosticIndex number Returns SourceFile | undefined getMessage(diagnosticIndex, options) Declaration getMessage(diagnosticIndex: number, options?: { detailed?: boolean; raw?: boolean; }): string; Parameters diagnosticIndex number options { detailed?: boolean; raw?: boolean; } Returns string report(pos, message, args) Declaration report(pos: number, message: Diagnostic, ...args: any[]): void; Parameters pos number message Diagnostic args any[] Returns void reportNode(sourceFile, node, message, args) Declaration reportNode(sourceFile: SourceFile | undefined, node: Node, message: Diagnostic, ...args: any[]): void; Parameters sourceFile SourceFile | undefined node Node message Diagnostic args any[] Returns void reportRange(pos, end, message, args) Declaration reportRange(pos: number, end: number, message: Diagnostic, ...args: any[]): void; Parameters pos number end number message Diagnostic args any[] Returns void setSourceFile(sourceFile) Declaration setSourceFile(sourceFile: SourceFile): void; Parameters sourceFile SourceFile Returns void values() Declaration values(): Generator<DiagnosticInfo | undefined, void, unknown>; Returns Generator < DiagnosticInfo | undefined, void, unknown>"
  },
  "api/grammarkdown/ecmarkupemitter.html": {
    "href": "api/grammarkdown/ecmarkupemitter.html",
    "title": "Class EcmarkupEmitter | Grammarkdown API Reference",
    "keywords": "Class EcmarkupEmitter Package : grammarkdown Inheritance Emitter EcmarkupEmitter Properties extension Declaration protected extension: string; Property Value string Methods afterEmitNode(node) Declaration protected afterEmitNode(node: Node): void; Parameters node Node Returns void emitArgument(node) Declaration protected emitArgument(node: Argument): void; Parameters node Argument Returns void emitArgumentList(node) Declaration protected emitArgumentList(node: ArgumentList): void; Parameters node ArgumentList Returns void emitButNotSymbol(node) Declaration protected emitButNotSymbol(node: ButNotSymbol): void; Parameters node ButNotSymbol Returns void emitConstraints(node) Declaration protected emitConstraints(node: Constraints): void; Parameters node Constraints Returns void emitEmptyAssertion(node) Declaration protected emitEmptyAssertion(node: EmptyAssertion): void; Parameters node EmptyAssertion Returns void emitLexicalGoalAssertion(node) Declaration protected emitLexicalGoalAssertion(node: LexicalGoalAssertion): void; Parameters node LexicalGoalAssertion Returns void emitLookaheadAssertion(node) Declaration protected emitLookaheadAssertion(node: LookaheadAssertion): void; Parameters node LookaheadAssertion Returns void emitNonterminal(node) Declaration protected emitNonterminal(node: Nonterminal): void; Parameters node Nonterminal Returns void emitNoSymbolHereAssertion(node) Declaration protected emitNoSymbolHereAssertion(node: NoSymbolHereAssertion): void; Parameters node NoSymbolHereAssertion Returns void emitOneOfList(node) Declaration protected emitOneOfList(node: OneOfList): void; Parameters node OneOfList Returns void emitOneOfSymbol(node) Declaration protected emitOneOfSymbol(node: OneOfSymbol): void; Parameters node OneOfSymbol Returns void emitParameter(node) Declaration protected emitParameter(node: Parameter): void; Parameters node Parameter Returns void emitParameterList(node) Declaration protected emitParameterList(node: ParameterList): void; Parameters node ParameterList Returns void emitPlaceholder(node) Declaration protected emitPlaceholder(node: LexicalSymbol): void; Parameters node LexicalSymbol Returns void emitProduction(node) Declaration protected emitProduction(node: Production): void; Parameters node Production Returns void emitProse(node) Declaration protected emitProse(node: Prose): void; Parameters node Prose Returns void emitProseAssertion(node) Declaration protected emitProseAssertion(node: ProseAssertion): void; Parameters node ProseAssertion Returns void emitRightHandSide(node) Declaration protected emitRightHandSide(node: RightHandSide): void; Parameters node RightHandSide Returns void emitRightHandSideList(node) Declaration protected emitRightHandSideList(node: RightHandSideList): void; Parameters node RightHandSideList Returns void emitSymbolSet(node) Declaration protected emitSymbolSet(node: SymbolSet): void; Parameters node SymbolSet Returns void emitSymbolSpan(node) Declaration protected emitSymbolSpan(node: SymbolSpan): void; Parameters node SymbolSpan Returns void emitTerminal(node) Declaration protected emitTerminal(node: Terminal): void; Parameters node Terminal Returns void emitTerminalLiteral(node) Declaration protected emitTerminalLiteral(node: TerminalLiteral): void; Parameters node TerminalLiteral Returns void emitTextContent(node) Declaration protected emitTextContent(node: TextContent): void; Parameters node TextContent Returns void emitUnicodeCharacterLiteral(node) Declaration protected emitUnicodeCharacterLiteral(node: UnicodeCharacterLiteral): void; Parameters node UnicodeCharacterLiteral Returns void emitUnicodeCharacterRange(node) Declaration protected emitUnicodeCharacterRange(node: UnicodeCharacterRange): void; Parameters node UnicodeCharacterRange Returns void"
  },
  "api/grammarkdown/emitformat.html": {
    "href": "api/grammarkdown/emitformat.html",
    "title": "Enum EmitFormat | Grammarkdown API Reference",
    "keywords": "Enum EmitFormat Package : grammarkdown Indicates the emit output format. Fields Name Value Description ecmarkup 2 Output should be emitted in ECMArkup format. html 1 Output should be emitted in HTML format. markdown 0 Output should be emitted in Markdown format."
  },
  "api/grammarkdown/emitter.html": {
    "href": "api/grammarkdown/emitter.html",
    "title": "Class Emitter | Grammarkdown API Reference",
    "keywords": "Class Emitter Package : grammarkdown Constructors constructor(options) Constructs a new instance of the Emitter class Declaration constructor(options: CompilerOptions); Parameters options CompilerOptions Properties extension Declaration protected extension: string; Property Value string options Declaration protected options: CompilerOptions; Property Value CompilerOptions resolver Declaration protected resolver: Resolver; Property Value Resolver sourceFile Declaration protected get sourceFile(): SourceFile | undefined; Property Value SourceFile | undefined writer Declaration protected writer: StringWriter; Property Value StringWriter Methods afterEmitNode(node) Declaration protected afterEmitNode(node: Node): void; Parameters node Node Returns void afterEmitTrivia(node) Declaration protected afterEmitTrivia(node: Trivia): void; Parameters node Trivia Returns void beforeEmitNode(node) Declaration protected beforeEmitNode(node: Node): void; Parameters node Node Returns void beforeEmitTrivia(node) Declaration protected beforeEmitTrivia(node: Trivia): void; Parameters node Trivia Returns void createWriter(options) Declaration protected createWriter(options: CompilerOptions): StringWriter; Parameters options CompilerOptions Returns StringWriter emit(node, resolver, diagnostics, writeFile, cancelable) Declaration emit(node: SourceFile, resolver: Resolver, diagnostics: DiagnosticMessages, writeFile: (file: string, text: string, cancelToken?: CancelToken) => void | PromiseLike<void>, cancelable?: Cancelable): Promise<void>; Parameters node SourceFile resolver Resolver diagnostics DiagnosticMessages writeFile (file: string, text: string, cancelToken?: CancelToken ) => void | PromiseLike <void> cancelable Cancelable Returns Promise <void> emitArgument(node) Declaration protected emitArgument(node: Argument): void; Parameters node Argument Returns void emitArgumentList(node) Declaration protected emitArgumentList(node: ArgumentList): void; Parameters node ArgumentList Returns void emitButNotSymbol(node) Declaration protected emitButNotSymbol(node: ButNotSymbol): void; Parameters node ButNotSymbol Returns void emitChildren(node) Declaration protected emitChildren(node: Node): void; Parameters node Node Returns void emitConstraints(node) Declaration protected emitConstraints(node: Constraints): void; Parameters node Constraints Returns void emitDefine(node) Declaration protected emitDefine(node: Define): void; Parameters node Define Returns void emitDetachedTriviaOfNode(node) Declaration protected emitDetachedTriviaOfNode(node: Node): void; Parameters node Node Returns void emitEmptyAssertion(node) Declaration protected emitEmptyAssertion(node: EmptyAssertion): void; Parameters node EmptyAssertion Returns void emitHtmlCloseTagTrivia(node) Declaration protected emitHtmlCloseTagTrivia(node: HtmlCloseTagTrivia): void; Parameters node HtmlCloseTagTrivia Returns void emitHtmlCommentTrivia(node) Declaration protected emitHtmlCommentTrivia(node: HtmlCommentTrivia): void; Parameters node HtmlCommentTrivia Returns void emitHtmlOpenTagTrivia(node) Declaration protected emitHtmlOpenTagTrivia(node: HtmlOpenTagTrivia): void; Parameters node HtmlOpenTagTrivia Returns void emitIdentifier(node) Declaration protected emitIdentifier(node: Identifier): void; Parameters node Identifier Returns void emitImport(node) Declaration protected emitImport(node: Import): void; Parameters node Import Returns void emitKeyword(node) Declaration protected emitKeyword(node: Node): void; Parameters node Node Returns void emitLeadingTriviaOfNode(node) Declaration protected emitLeadingTriviaOfNode(node: Node): void; Parameters node Node Returns void emitLexicalGoalAssertion(node) Declaration protected emitLexicalGoalAssertion(node: LexicalGoalAssertion): void; Parameters node LexicalGoalAssertion Returns void emitLine(node) Declaration protected emitLine(node: Line): void; Parameters node Line Returns void emitLinkReference(node) Declaration protected emitLinkReference(node: LinkReference): void; Parameters node LinkReference Returns void emitLookaheadAssertion(node) Declaration protected emitLookaheadAssertion(node: LookaheadAssertion): void; Parameters node LookaheadAssertion Returns void emitMultiLineCommentTrivia(node) Declaration protected emitMultiLineCommentTrivia(node: MultiLineCommentTrivia): void; Parameters node MultiLineCommentTrivia Returns void emitNode(node) Declaration protected emitNode(node: Node | undefined): void; Parameters node Node | undefined Returns void emitNodeCore(node) Declaration protected emitNodeCore(node: Node): void; Parameters node Node Returns void emitNodes(nodes) Declaration protected emitNodes(nodes: Iterable<Node>): void; Parameters nodes Iterable < Node > Returns void emitNonterminal(node) Declaration protected emitNonterminal(node: Nonterminal): void; Parameters node Nonterminal Returns void emitNoSymbolHereAssertion(node) Declaration protected emitNoSymbolHereAssertion(node: NoSymbolHereAssertion): void; Parameters node NoSymbolHereAssertion Returns void emitNumberLiteral(node) Declaration protected emitNumberLiteral(node: NumberLiteral): void; Parameters node NumberLiteral Returns void emitOneOfList(node) Declaration protected emitOneOfList(node: OneOfList): void; Parameters node OneOfList Returns void emitOneOfSymbol(node) Declaration protected emitOneOfSymbol(node: OneOfSymbol): void; Parameters node OneOfSymbol Returns void emitParameter(node) Declaration protected emitParameter(node: Parameter): void; Parameters node Parameter Returns void emitParameterList(node) Declaration protected emitParameterList(node: ParameterList): void; Parameters node ParameterList Returns void emitPlaceholder(node) Declaration protected emitPlaceholder(node: PlaceholderSymbol): void; Parameters node PlaceholderSymbol Returns void emitProduction(node) Declaration protected emitProduction(node: Production): void; Parameters node Production Returns void emitProse(node) Declaration protected emitProse(node: Prose): void; Parameters node Prose Returns void emitProseAssertion(node) Declaration protected emitProseAssertion(node: ProseAssertion): void; Parameters node ProseAssertion Returns void emitProseFragmentLiteral(node) Declaration protected emitProseFragmentLiteral(node: ProseFragmentLiteral): void; Parameters node ProseFragmentLiteral Returns void emitRightHandSide(node) Declaration protected emitRightHandSide(node: RightHandSide): void; Parameters node RightHandSide Returns void emitRightHandSideList(node) Declaration protected emitRightHandSideList(node: RightHandSideList): void; Parameters node RightHandSideList Returns void emitSingleLineCommentTrivia(node) Declaration protected emitSingleLineCommentTrivia(node: SingleLineCommentTrivia): void; Parameters node SingleLineCommentTrivia Returns void emitSourceFile(node) Declaration protected emitSourceFile(node: SourceFile): void; Parameters node SourceFile Returns void emitString(sourceFile, resolver, diagnostics, cancelable, node) Declaration emitString(sourceFile: SourceFile, resolver: Resolver, diagnostics: DiagnosticMessages, cancelable?: Cancelable, node?: Node): string; Parameters sourceFile SourceFile resolver Resolver diagnostics DiagnosticMessages cancelable Cancelable node Node Returns string emitStringLiteral(node) Declaration protected emitStringLiteral(node: StringLiteral): void; Parameters node StringLiteral Returns void emitSymbolSet(node) Declaration protected emitSymbolSet(node: SymbolSet): void; Parameters node SymbolSet Returns void emitSymbolSpan(node) Declaration protected emitSymbolSpan(node: SymbolSpan): void; Parameters node SymbolSpan Returns void emitTerminal(node) Declaration protected emitTerminal(node: Terminal): void; Parameters node Terminal Returns void emitTerminalLiteral(node) Declaration protected emitTerminalLiteral(node: TerminalLiteral): void; Parameters node TerminalLiteral Returns void emitTextContent(node) Declaration protected emitTextContent(node: TextContent): void; Parameters node TextContent Returns void emitTextRange(range) Declaration protected emitTextRange(range: TextRange): void; Parameters range TextRange Returns void emitToken(node) Declaration protected emitToken(node: Node | undefined): void; Parameters node Node | undefined Returns void emitTokenKind(kind) Declaration protected emitTokenKind(kind: SyntaxKind): void; Parameters kind SyntaxKind Returns void emitTrailingTriviaOfNode(node) Declaration protected emitTrailingTriviaOfNode(node: Node): void; Parameters node Node Returns void emitTrivia(node) Declaration protected emitTrivia(node: Trivia): void; Parameters node Trivia Returns void emitTriviaCore(node) Declaration protected emitTriviaCore(node: Trivia): void; Parameters node Trivia Returns void emitTriviaNodes(nodes) Declaration protected emitTriviaNodes(nodes: readonly Trivia[] | undefined): void; Parameters nodes readonly Trivia [] | undefined Returns void emitUnicodeCharacterLiteral(node) Declaration protected emitUnicodeCharacterLiteral(node: UnicodeCharacterLiteral): void; Parameters node UnicodeCharacterLiteral Returns void emitUnicodeCharacterRange(node) Declaration protected emitUnicodeCharacterRange(node: UnicodeCharacterRange): void; Parameters node UnicodeCharacterRange Returns void encode(text) Declaration protected encode(text: string): string; Parameters text string Returns string getOutputFilename(node) Declaration protected getOutputFilename(node: SourceFile): string; Parameters node SourceFile Returns string"
  },
  "api/grammarkdown/emptyassertion.html": {
    "href": "api/grammarkdown/emptyassertion.html",
    "title": "Class EmptyAssertion | Grammarkdown API Reference",
    "keywords": "Class EmptyAssertion Package : grammarkdown Represents the empty assertion, which matches exactly zero tokens. [empty] Inheritance AssertionBase < SyntaxKind.EmptyAssertion , SyntaxKind.OpenBracketToken > EmptyAssertion Constructors constructor(openBracketToken, emptyKeyword, closeBracketToken) Constructs a new instance of the EmptyAssertion class Declaration constructor(openBracketToken: Token<SyntaxKind.OpenBracketToken>, emptyKeyword: Token<SyntaxKind.EmptyKeyword>, closeBracketToken: Token<SyntaxKind.CloseBracketToken> | undefined); Parameters openBracketToken Token < SyntaxKind.OpenBracketToken > emptyKeyword Token < SyntaxKind.EmptyKeyword > closeBracketToken Token < SyntaxKind.CloseBracketToken > | undefined Properties edgeCount Declaration protected get edgeCount(): number; Property Value number emptyKeyword Declaration readonly emptyKeyword: Token<SyntaxKind.EmptyKeyword>; Property Value Token < SyntaxKind.EmptyKeyword > lastChild Declaration get lastChild(): Node | undefined; Property Value Node | undefined Methods accept(visitor) Declaration protected accept(visitor: NodeVisitor): EmptyAssertion; Parameters visitor NodeVisitor Returns EmptyAssertion children() Declaration children(): IterableIterator<Node>; Returns IterableIterator < Node > edgeName(offset) Declaration protected edgeName(offset: number): string | undefined; Parameters offset number Returns string | undefined edgeValue(offset) Declaration protected edgeValue(offset: number): Node | ReadonlyArray<Node> | undefined; Parameters offset number Returns Node | ReadonlyArray < Node > | undefined forEachChild(cbNode) Declaration forEachChild<T>(cbNode: (node: Node) => T | undefined): T | undefined; Type Parameters T Parameters cbNode (node: Node ) => T | undefined Returns T | undefined"
  },
  "api/grammarkdown/grammar.html": {
    "href": "api/grammarkdown/grammar.html",
    "title": "Class Grammar | Grammarkdown API Reference",
    "keywords": "Class Grammar Package : grammarkdown The primary service used to interact with one or more Grammarkdown SourceFiles <!-- --> . Constructors constructor(rootNames, options, host) Constructs a new instance of the Grammar class Declaration constructor(rootNames: Iterable<string>, options?: CompilerOptions, host?: CoreAsyncHost); Parameters rootNames Iterable <string> The names of the root files used by the grammar. options CompilerOptions The CompilerOptions used by the grammar. host CoreAsyncHost The [Host](xref:hosts) the grammar uses to interact with the file system. Properties binder Gets the Binder used to bind the grammar. Declaration protected get binder(): Binder; Property Value Binder checker Gets the Checker used to check the grammar. Declaration protected get checker(): Checker; Property Value Checker diagnostics The diagnostic messages produced by the grammar. Declaration readonly diagnostics: DiagnosticMessages; Property Value DiagnosticMessages emitter Gets the Emitter used to emit the grammar. Declaration protected get emitter(): Emitter; Property Value Emitter host The CoreAsyncHost the grammar uses to interact with the file system. Declaration readonly host: CoreAsyncHost; Property Value CoreAsyncHost isBound Indicates whether the grammar has been bound. Declaration get isBound(): boolean; Property Value boolean isParsed Indicates whether the grammar has been parsed. Declaration get isParsed(): boolean; Property Value boolean options The CompilerOptions used by the grammar. Declaration readonly options: Readonly<CompilerOptions>; Property Value Readonly < CompilerOptions > resolver Gets the resolver used to resolve references to bound nodes. Declaration get resolver(): Resolver; Property Value Resolver rootFiles Gets the root files parsed by the grammar. Declaration get rootFiles(): readonly SourceFile[]; Property Value readonly SourceFile [] sourceFiles Gets the source files parsed by the grammar. Declaration get sourceFiles(): readonly SourceFile[]; Property Value readonly SourceFile [] Methods bind(cancelable) Asynchronously binds each file in the grammar. Will also parse the grammar if it has not yet been parsed. Declaration bind(cancelable?: Cancelable): Promise<void>; Parameters cancelable Cancelable A cancelable object that can be used to abort the operation. Returns Promise <void> A Promise that is settled when the operation has completed. check(sourceFile, cancelable) Asynchronously checks each file in the grammar. Will also parse and bind the grammar if it has not yet been parsed or bound. Declaration check(sourceFile?: SourceFile, cancelable?: Cancelable): Promise<void>; Parameters sourceFile SourceFile cancelable Cancelable A cancelable object that can be used to abort the operation. Returns Promise <void> A Promise that is settled when the operation has completed. convert(content, options, hostFallback, cancelable) Converts a string containing Grammarkdown syntax into output based on the provided options. Declaration static convert(content: string, options?: CompilerOptions & { file?: string; }, hostFallback?: CoreAsyncHost, cancelable?: Cancelable): Promise<string>; Parameters content string The Grammarkdown source text to convert. options CompilerOptions & { file?: string; } The CompilerOptions used by the grammar. hostFallback CoreAsyncHost An optional host to use as a fallback for file system operations. cancelable Cancelable A cancelable object that can be used to abort the operation. Returns Promise <string> createBinder(options) When overridden in a derived class, creates a Binder to be used by this grammar. Declaration /** @virtual */ protected createBinder(options: Readonly<CompilerOptions>): Binder; Parameters options Readonly < CompilerOptions > The options to pass on to the Binder <!-- --> . Returns Binder createChecker(options) When overridden in a derived class, creates a Checker to be used by this grammar. Declaration /** @virtual */ protected createChecker(options: Readonly<CompilerOptions>): Checker; Parameters options Readonly < CompilerOptions > The options to pass on to the Checker <!-- --> . Returns Checker createEmitter(options) When overridden in a derived class, creates an Emitter to be used by this grammar. Declaration /** @virtual */ protected createEmitter(options: CompilerOptions): Emitter; Parameters options CompilerOptions The options to pass on to the Emitter <!-- --> . Returns Emitter createResolver(bindings) When overridden in a derived class, creates a Resolver to be used by this grammar. Declaration /** @virtual */ protected createResolver(bindings: BindingTable): Resolver; Parameters bindings BindingTable A BindingTable used by the resolver to resolve references to nodes. Returns Resolver emit(sourceFile, writeFile, cancelable) Asynchronously emits each file in the grammar. Will also parse, bind, and check the grammar if it has not yet been parsed, bound, or checked. Declaration emit(sourceFile?: SourceFile, writeFile?: (file: string, output: string, cancelToken?: CancelToken) => void | PromiseLike<void>, cancelable?: Cancelable): Promise<void>; Parameters sourceFile SourceFile The SourceFile to emit. If not provided, this method will generate output for all root files. writeFile (file: string, output: string, cancelToken?: CancelToken ) => void | PromiseLike <void> An optional callback used to write the output. If not provided, this method will emit output via this grammar's host <!-- --> . cancelable Cancelable A cancelable object that can be used to abort the operation. Returns Promise <void> A Promise that is settled when the operation has completed. emitString(sourceFile, cancelable) Asynchronously emits the provided file in the grammar as a string. Will also parse, bind, and check the grammar if it has not yet been parsed, bound, or checked. Declaration emitString(sourceFile: SourceFile, cancelable?: Cancelable): Promise<string>; Parameters sourceFile SourceFile The SourceFile to emit. cancelable Cancelable A cancelable object that can be used to abort the operation. Returns Promise <string> A Promise for the emit output that is settled when the operation has completed. getSourceFile(file) Gets the SourceFile parsed for the provided file path. Declaration getSourceFile(file: string): SourceFile | undefined; Parameters file string The path to the source file. Returns SourceFile | undefined The SourceFile for the provided path, if one was parsed; otherwise, undefined <!-- --> . parse(cancelable) Asynchronously parses the root files provided to the grammar. Declaration parse(cancelable?: Cancelable): Promise<void>; Parameters cancelable Cancelable A cancelable object that can be used to abort the operation. Returns Promise <void> A Promise that is settled when the operation has completed. readFile(file, cancelToken) When overridden in a derived class, asynchronously reads the contents of the provided file. Declaration /** @virtual */ protected readFile(file: string, cancelToken?: CancelToken): Promise<string | undefined> | string | undefined; Parameters file string The file to read. cancelToken CancelToken A cancellation token that can be used by the caller to abort the operation. Returns Promise <string | undefined> | string | undefined A Promise for either a string containing the content if the file could be read, or undefined if the file could not be read. writeFile(file, content, cancelToken) When overridden in a derived class, asynchronously writes a file to the host. Declaration /** @virtual */ protected writeFile(file: string, content: string, cancelToken?: CancelToken): Promise<void>; Parameters file string The path to the file. content string cancelToken CancelToken A cancellation token that can be used by the caller to abort the operation. Returns Promise <void> A Promise that is settled when the operation completes."
  },
  "api/grammarkdown/grammarkdownemitter.html": {
    "href": "api/grammarkdown/grammarkdownemitter.html",
    "title": "Class GrammarkdownEmitter | Grammarkdown API Reference",
    "keywords": "Class GrammarkdownEmitter Package : grammarkdown Inheritance Emitter GrammarkdownEmitter Properties extension Declaration protected extension: string; Property Value string Methods afterEmitTrivia(node) Declaration protected afterEmitTrivia(node: Trivia): void; Parameters node Trivia Returns void beforeEmitTrivia(node) Declaration protected beforeEmitTrivia(node: Trivia): void; Parameters node Trivia Returns void emitArgument(node) Declaration protected emitArgument(node: Argument): void; Parameters node Argument Returns void emitArgumentList(node) Declaration protected emitArgumentList(node: ArgumentList): void; Parameters node ArgumentList Returns void emitButNotSymbol(node) Declaration protected emitButNotSymbol(node: ButNotSymbol): void; Parameters node ButNotSymbol Returns void emitConstraints(node) Declaration protected emitConstraints(node: Constraints): void; Parameters node Constraints Returns void emitDefine(node) Declaration protected emitDefine(node: Define): void; Parameters node Define Returns void emitEmptyAssertion(node) Declaration protected emitEmptyAssertion(node: EmptyAssertion): void; Parameters node EmptyAssertion Returns void emitImport(node) Declaration protected emitImport(node: Import): void; Parameters node Import Returns void emitLexicalGoalAssertion(node) Declaration protected emitLexicalGoalAssertion(node: LexicalGoalAssertion): void; Parameters node LexicalGoalAssertion Returns void emitLine(node) Declaration protected emitLine(node: Line): void; Parameters node Line Returns void emitLinkReference(node) Declaration protected emitLinkReference(node: LinkReference): void; Parameters node LinkReference Returns void emitLookaheadAssertion(node) Declaration protected emitLookaheadAssertion(node: LookaheadAssertion): void; Parameters node LookaheadAssertion Returns void emitMultiLineCommentTrivia(node) Declaration protected emitMultiLineCommentTrivia(node: MultiLineCommentTrivia): void; Parameters node MultiLineCommentTrivia Returns void emitNonterminal(node) Declaration protected emitNonterminal(node: Nonterminal): void; Parameters node Nonterminal Returns void emitNoSymbolHereAssertion(node) Declaration protected emitNoSymbolHereAssertion(node: NoSymbolHereAssertion): void; Parameters node NoSymbolHereAssertion Returns void emitNumberLiteral(node) Declaration protected emitNumberLiteral(node: NumberLiteral): void; Parameters node NumberLiteral Returns void emitOneOfList(node) Declaration protected emitOneOfList(node: OneOfList): void; Parameters node OneOfList Returns void emitOneOfSymbol(node) Declaration protected emitOneOfSymbol(node: OneOfSymbol): void; Parameters node OneOfSymbol Returns void emitParameter(node) Declaration protected emitParameter(node: Parameter): void; Parameters node Parameter Returns void emitParameterList(node) Declaration protected emitParameterList(node: ParameterList): void; Parameters node ParameterList Returns void emitPlaceholder(node) Declaration protected emitPlaceholder(node: LexicalSymbol): void; Parameters node LexicalSymbol Returns void emitProduction(node) Declaration protected emitProduction(node: Production): void; Parameters node Production Returns void emitProse(node) Declaration protected emitProse(node: Prose): void; Parameters node Prose Returns void emitProseAssertion(node) Declaration protected emitProseAssertion(node: ProseAssertion): void; Parameters node ProseAssertion Returns void emitRightHandSide(node) Declaration protected emitRightHandSide(node: RightHandSide): void; Parameters node RightHandSide Returns void emitRightHandSideList(node) Declaration protected emitRightHandSideList(node: RightHandSideList): void; Parameters node RightHandSideList Returns void emitSingleLineCommentTrivia(node) Declaration protected emitSingleLineCommentTrivia(node: SingleLineCommentTrivia): void; Parameters node SingleLineCommentTrivia Returns void emitSourceFile(node) Declaration protected emitSourceFile(node: SourceFile): void; Parameters node SourceFile Returns void emitStringLiteral(node) Declaration protected emitStringLiteral(node: StringLiteral): void; Parameters node StringLiteral Returns void emitSymbolSet(node) Declaration protected emitSymbolSet(node: SymbolSet): void; Parameters node SymbolSet Returns void emitSymbolSpan(node) Declaration protected emitSymbolSpan(node: SymbolSpan): void; Parameters node SymbolSpan Returns void emitTerminal(node) Declaration protected emitTerminal(node: Terminal): void; Parameters node Terminal Returns void emitTerminalLiteral(node) Declaration protected emitTerminalLiteral(node: TerminalLiteral): void; Parameters node TerminalLiteral Returns void emitTextContent(node) Declaration protected emitTextContent(node: TextContent): void; Parameters node TextContent Returns void emitUnicodeCharacterLiteral(node) Declaration protected emitUnicodeCharacterLiteral(node: UnicodeCharacterLiteral): void; Parameters node UnicodeCharacterLiteral Returns void emitUnicodeCharacterRange(node) Declaration protected emitUnicodeCharacterRange(node: UnicodeCharacterRange): void; Parameters node UnicodeCharacterRange Returns void"
  },
  "api/grammarkdown/htmlclosetagtrivia.html": {
    "href": "api/grammarkdown/htmlclosetagtrivia.html",
    "title": "Class HtmlCloseTagTrivia | Grammarkdown API Reference",
    "keywords": "Class HtmlCloseTagTrivia Package : grammarkdown Represents an HTML close-tag trivia token: Production :: <ins>Inserted</ins> <del>Deleted</del> Inheritance HtmlTagTriviaBase < SyntaxKind.HtmlCloseTagTrivia > HtmlCloseTagTrivia Constructors constructor(tagName) Constructs a new instance of the HtmlCloseTagTrivia class Declaration constructor(tagName: string); Parameters tagName string"
  },
  "api/grammarkdown/htmlcommenttrivia.html": {
    "href": "api/grammarkdown/htmlcommenttrivia.html",
    "title": "Class HtmlCommentTrivia | Grammarkdown API Reference",
    "keywords": "Class HtmlCommentTrivia Package : grammarkdown Represents an HTML comment trivia token: Production :: <!--before-->Nonterminal Inheritance HtmlTriviaBase < SyntaxKind.HtmlCommentTrivia > HtmlCommentTrivia Constructors constructor() Constructs a new instance of the HtmlCommentTrivia class Declaration constructor();"
  },
  "api/grammarkdown/htmlemitter.html": {
    "href": "api/grammarkdown/htmlemitter.html",
    "title": "Class HtmlEmitter | Grammarkdown API Reference",
    "keywords": "Class HtmlEmitter Package : grammarkdown Inheritance Emitter HtmlEmitter Properties extension Declaration protected extension: string; Property Value string Methods afterEmitNode(node) Declaration protected afterEmitNode(node: Node): void; Parameters node Node Returns void emitArgument(node) Declaration protected emitArgument(node: Argument): void; Parameters node Argument Returns void emitArgumentList(node) Declaration protected emitArgumentList(node: ArgumentList): void; Parameters node ArgumentList Returns void emitButNotSymbol(node) Declaration protected emitButNotSymbol(node: ButNotSymbol): void; Parameters node ButNotSymbol Returns void emitConstraints(node) Declaration protected emitConstraints(node: Constraints): void; Parameters node Constraints Returns void emitEmptyAssertion(node) Declaration protected emitEmptyAssertion(node: EmptyAssertion): void; Parameters node EmptyAssertion Returns void emitLexicalGoalAssertion(node) Declaration protected emitLexicalGoalAssertion(node: LexicalGoalAssertion): void; Parameters node LexicalGoalAssertion Returns void emitLookaheadAssertion(node) Declaration protected emitLookaheadAssertion(node: LookaheadAssertion): void; Parameters node LookaheadAssertion Returns void emitNonterminal(node) Declaration protected emitNonterminal(node: Nonterminal): void; Parameters node Nonterminal Returns void emitNoSymbolHereAssertion(node) Declaration protected emitNoSymbolHereAssertion(node: NoSymbolHereAssertion): void; Parameters node NoSymbolHereAssertion Returns void emitOneOfList(node) Declaration protected emitOneOfList(node: OneOfList): void; Parameters node OneOfList Returns void emitOneOfSymbol(node) Declaration protected emitOneOfSymbol(node: OneOfSymbol): void; Parameters node OneOfSymbol Returns void emitParameter(node) Declaration protected emitParameter(node: Parameter): void; Parameters node Parameter Returns void emitParameterList(node) Declaration protected emitParameterList(node: ParameterList): void; Parameters node ParameterList Returns void emitPlaceholder(node) Declaration protected emitPlaceholder(node: LexicalSymbol): void; Parameters node LexicalSymbol Returns void emitProduction(node) Declaration protected emitProduction(node: Production): void; Parameters node Production Returns void emitProse(node) Declaration protected emitProse(node: Prose): void; Parameters node Prose Returns void emitProseAssertion(node) Declaration protected emitProseAssertion(node: ProseAssertion): void; Parameters node ProseAssertion Returns void emitRightHandSide(node) Declaration protected emitRightHandSide(node: RightHandSide): void; Parameters node RightHandSide Returns void emitRightHandSideList(node) Declaration protected emitRightHandSideList(node: RightHandSideList): void; Parameters node RightHandSideList Returns void emitSourceFile(node) Declaration protected emitSourceFile(node: SourceFile): void; Parameters node SourceFile Returns void emitSymbolSet(node) Declaration protected emitSymbolSet(node: SymbolSet): void; Parameters node SymbolSet Returns void emitSymbolSpan(node) Declaration protected emitSymbolSpan(node: SymbolSpan): void; Parameters node SymbolSpan Returns void emitTerminal(node) Declaration protected emitTerminal(node: Terminal): void; Parameters node Terminal Returns void emitTerminalLiteral(node) Declaration protected emitTerminalLiteral(node: TerminalLiteral): void; Parameters node TerminalLiteral Returns void emitTextContent(node) Declaration protected emitTextContent(node: TextContent): void; Parameters node TextContent Returns void emitUnicodeCharacterLiteral(node) Declaration protected emitUnicodeCharacterLiteral(node: UnicodeCharacterLiteral): void; Parameters node UnicodeCharacterLiteral Returns void emitUnicodeCharacterRange(node) Declaration protected emitUnicodeCharacterRange(node: UnicodeCharacterRange): void; Parameters node UnicodeCharacterRange Returns void"
  },
  "api/grammarkdown/htmlopentagtrivia.html": {
    "href": "api/grammarkdown/htmlopentagtrivia.html",
    "title": "Class HtmlOpenTagTrivia | Grammarkdown API Reference",
    "keywords": "Class HtmlOpenTagTrivia Package : grammarkdown Represents an HTML open-tag trivia token: Production :: <ins>Inserted</ins> <del>Deleted</del> Inheritance HtmlTagTriviaBase < SyntaxKind.HtmlOpenTagTrivia > HtmlOpenTagTrivia Constructors constructor(tagName) Constructs a new instance of the HtmlOpenTagTrivia class Declaration constructor(tagName: string); Parameters tagName string"
  },
  "api/grammarkdown/htmltagtriviabase.html": {
    "href": "api/grammarkdown/htmltagtriviabase.html",
    "title": "Class HtmlTagTriviaBase | Grammarkdown API Reference",
    "keywords": "Class HtmlTagTriviaBase Package : grammarkdown Inheritance HtmlTriviaBase <TKind> HtmlTagTriviaBase Constructors constructor(kind, tagName) Constructs a new instance of the HtmlTagTriviaBase class Declaration constructor(kind: TKind, tagName: string); Parameters kind TKind tagName string Properties tagName Declaration readonly tagName: string; Property Value string"
  },
  "api/grammarkdown/htmltriviabase.html": {
    "href": "api/grammarkdown/htmltriviabase.html",
    "title": "Class HtmlTriviaBase | Grammarkdown API Reference",
    "keywords": "Class HtmlTriviaBase Package : grammarkdown Inheritance TriviaBase <TKind> HtmlTriviaBase"
  },
  "api/grammarkdown/identifier.html": {
    "href": "api/grammarkdown/identifier.html",
    "title": "Class Identifier | Grammarkdown API Reference",
    "keywords": "Class Identifier Package : grammarkdown Represents an identifier such as a Production or Parameter. Inheritance Node < SyntaxKind.Identifier > Identifier Constructors constructor(text) Constructs a new instance of the Identifier class Declaration constructor(text: string | undefined); Parameters text string | undefined Properties text Declaration readonly text: string | undefined; Property Value string | undefined Methods accept(visitor) Declaration protected accept(visitor: NodeVisitor): Identifier; Parameters visitor NodeVisitor Returns Identifier"
  },
  "api/grammarkdown/import.html": {
    "href": "api/grammarkdown/import.html",
    "title": "Class Import | Grammarkdown API Reference",
    "keywords": "Class Import Package : grammarkdown Inheritance MetaElementBase < SyntaxKind.Import > Import Constructors constructor(atToken, importKeyword, path) Constructs a new instance of the Import class Declaration constructor(atToken: Token<SyntaxKind.AtToken>, importKeyword: Token<SyntaxKind.ImportKeyword>, path: StringLiteral | undefined); Parameters atToken Token < SyntaxKind.AtToken > importKeyword Token < SyntaxKind.ImportKeyword > path StringLiteral | undefined Properties edgeCount Declaration protected get edgeCount(): number; Property Value number importKeyword Declaration readonly importKeyword: Token<SyntaxKind.ImportKeyword>; Property Value Token < SyntaxKind.ImportKeyword > lastChild Declaration get lastChild(): Node | undefined; Property Value Node | undefined path Declaration readonly path: StringLiteral | undefined; Property Value StringLiteral | undefined Methods accept(visitor) Declaration protected accept(visitor: NodeVisitor): Import; Parameters visitor NodeVisitor Returns Import children() Declaration children(): IterableIterator<Node>; Returns IterableIterator < Node > edgeName(offset) Declaration protected edgeName(offset: number): string | undefined; Parameters offset number Returns string | undefined edgeValue(offset) Declaration protected edgeValue(offset: number): Node | ReadonlyArray<Node> | undefined; Parameters offset number Returns Node | ReadonlyArray < Node > | undefined forEachChild(cbNode) Declaration forEachChild<T>(cbNode: (node: Node) => T | undefined): T | undefined; Type Parameters T Parameters cbNode (node: Node ) => T | undefined Returns T | undefined"
  },
  "api/grammarkdown/invalidassertion.html": {
    "href": "api/grammarkdown/invalidassertion.html",
    "title": "Class InvalidAssertion | Grammarkdown API Reference",
    "keywords": "Class InvalidAssertion Package : grammarkdown Inheritance AssertionBase < SyntaxKind.InvalidAssertion , SyntaxKind.OpenBracketToken > InvalidAssertion Constructors constructor(openBracketToken, closeBracketToken) Constructs a new instance of the InvalidAssertion class Declaration constructor(openBracketToken: Token<SyntaxKind.OpenBracketToken>, closeBracketToken: Token<SyntaxKind.CloseBracketToken> | undefined); Parameters openBracketToken Token < SyntaxKind.OpenBracketToken > closeBracketToken Token < SyntaxKind.CloseBracketToken > | undefined Properties edgeCount Declaration protected get edgeCount(): number; Property Value number lastChild Declaration get lastChild(): Node | undefined; Property Value Node | undefined Methods accept(visitor) Declaration protected accept(visitor: NodeVisitor): InvalidAssertion; Parameters visitor NodeVisitor Returns InvalidAssertion children() Declaration children(): IterableIterator<Node>; Returns IterableIterator < Node > edgeName(offset) Declaration protected edgeName(offset: number): string | undefined; Parameters offset number Returns string | undefined edgeValue(offset) Declaration protected edgeValue(offset: number): Node | ReadonlyArray<Node> | undefined; Parameters offset number Returns Node | ReadonlyArray < Node > | undefined forEachChild(cbNode) Declaration forEachChild<T>(cbNode: (node: Node) => T | undefined): T | undefined; Type Parameters T Parameters cbNode (node: Node ) => T | undefined Returns T | undefined"
  },
  "api/grammarkdown/invalidsymbol.html": {
    "href": "api/grammarkdown/invalidsymbol.html",
    "title": "Class InvalidSymbol | Grammarkdown API Reference",
    "keywords": "Class InvalidSymbol Package : grammarkdown Inheritance LexicalSymbolBase < SyntaxKind.InvalidSymbol > InvalidSymbol Constructors constructor() Constructs a new instance of the InvalidSymbol class Declaration constructor(); Methods accept(visitor) Declaration protected accept(visitor: NodeVisitor): InvalidSymbol; Parameters visitor NodeVisitor Returns InvalidSymbol"
  },
  "api/grammarkdown/lexicalgoalassertion.html": {
    "href": "api/grammarkdown/lexicalgoalassertion.html",
    "title": "Class LexicalGoalAssertion | Grammarkdown API Reference",
    "keywords": "Class LexicalGoalAssertion Package : grammarkdown Represens a lexical-goal assertion which verifies that current lexical goal is the supplied *Nonterminal*. [lexical goal Module] Inheritance AssertionBase < SyntaxKind.LexicalGoalAssertion , SyntaxKind.OpenBracketToken > LexicalGoalAssertion Constructors constructor(openBracketToken, lexicalKeyword, goalKeyword, symbol, closeBracketToken) Constructs a new instance of the LexicalGoalAssertion class Declaration constructor(openBracketToken: Token<SyntaxKind.OpenBracketToken>, lexicalKeyword: Token<SyntaxKind.LexicalKeyword>, goalKeyword: Token<SyntaxKind.GoalKeyword> | undefined, symbol: Identifier | undefined, closeBracketToken: Token<SyntaxKind.CloseBracketToken> | undefined); Parameters openBracketToken Token < SyntaxKind.OpenBracketToken > lexicalKeyword Token < SyntaxKind.LexicalKeyword > goalKeyword Token < SyntaxKind.GoalKeyword > | undefined symbol Identifier | undefined closeBracketToken Token < SyntaxKind.CloseBracketToken > | undefined Properties edgeCount Declaration protected get edgeCount(): number; Property Value number goalKeyword Declaration readonly goalKeyword: Token<SyntaxKind.GoalKeyword> | undefined; Property Value Token < SyntaxKind.GoalKeyword > | undefined lastChild Declaration get lastChild(): Node | undefined; Property Value Node | undefined lexicalKeyword Declaration readonly lexicalKeyword: Token<SyntaxKind.LexicalKeyword>; Property Value Token < SyntaxKind.LexicalKeyword > symbol Declaration readonly symbol: Identifier | undefined; Property Value Identifier | undefined Methods accept(visitor) Declaration protected accept(visitor: NodeVisitor): LexicalGoalAssertion; Parameters visitor NodeVisitor Returns LexicalGoalAssertion children() Declaration children(): IterableIterator<Node>; Returns IterableIterator < Node > edgeName(offset) Declaration protected edgeName(offset: number): string | undefined; Parameters offset number Returns string | undefined edgeValue(offset) Declaration protected edgeValue(offset: number): Node | ReadonlyArray<Node> | undefined; Parameters offset number Returns Node | ReadonlyArray < Node > | undefined forEachChild(cbNode) Declaration forEachChild<T>(cbNode: (node: Node) => T | undefined): T | undefined; Type Parameters T Parameters cbNode (node: Node ) => T | undefined Returns T | undefined update(symbol) Declaration update(symbol: Identifier | undefined): LexicalGoalAssertion; Parameters symbol Identifier | undefined Returns LexicalGoalAssertion"
  },
  "api/grammarkdown/lexicalsymbolbase.html": {
    "href": "api/grammarkdown/lexicalsymbolbase.html",
    "title": "Class LexicalSymbolBase | Grammarkdown API Reference",
    "keywords": "Class LexicalSymbolBase Package : grammarkdown Inheritance Node <TKind> LexicalSymbolBase"
  },
  "api/grammarkdown/line.html": {
    "href": "api/grammarkdown/line.html",
    "title": "Class Line | Grammarkdown API Reference",
    "keywords": "Class Line Package : grammarkdown Inheritance MetaElementBase < SyntaxKind.Line > Line Constructors constructor(atToken, lineKeyword, number, path) Constructs a new instance of the Line class Declaration constructor(atToken: Token<SyntaxKind.AtToken>, lineKeyword: Token<SyntaxKind.LineKeyword>, number: NumberLiteral | Token<SyntaxKind.DefaultKeyword> | undefined, path: StringLiteral | undefined); Parameters atToken Token < SyntaxKind.AtToken > lineKeyword Token < SyntaxKind.LineKeyword > number NumberLiteral | Token < SyntaxKind.DefaultKeyword > | undefined path StringLiteral | undefined Properties edgeCount Declaration protected get edgeCount(): number; Property Value number lastChild Declaration get lastChild(): Node | undefined; Property Value Node | undefined lineKeyword Declaration readonly lineKeyword: Token<SyntaxKind.LineKeyword>; Property Value Token < SyntaxKind.LineKeyword > number Declaration readonly number: NumberLiteral | Token<SyntaxKind.DefaultKeyword> | undefined; Property Value NumberLiteral | Token < SyntaxKind.DefaultKeyword > | undefined path Declaration readonly path: StringLiteral | undefined; Property Value StringLiteral | undefined Methods accept(visitor) Declaration protected accept(visitor: NodeVisitor): Line; Parameters visitor NodeVisitor Returns Line children() Declaration children(): IterableIterator<Node>; Returns IterableIterator < Node > edgeName(offset) Declaration protected edgeName(offset: number): string | undefined; Parameters offset number Returns string | undefined edgeValue(offset) Declaration protected edgeValue(offset: number): Node | ReadonlyArray<Node> | undefined; Parameters offset number Returns Node | ReadonlyArray < Node > | undefined forEachChild(cbNode) Declaration forEachChild<T>(cbNode: (node: Node) => T | undefined): T | undefined; Type Parameters T Parameters cbNode (node: Node ) => T | undefined Returns T | undefined"
  },
  "api/grammarkdown/lineinfo.html": {
    "href": "api/grammarkdown/lineinfo.html",
    "title": "Interface LineInfo | Grammarkdown API Reference",
    "keywords": "Interface LineInfo Package : grammarkdown Properties line Declaration readonly line: number; Property Value number range Declaration readonly range: Range; Property Value Range rangeIncludingLineTerminator Declaration readonly rangeIncludingLineTerminator: Range; Property Value Range text Declaration readonly text: string; Property Value string"
  },
  "api/grammarkdown/linemap.html": {
    "href": "api/grammarkdown/linemap.html",
    "title": "Class LineMap | Grammarkdown API Reference",
    "keywords": "Class LineMap Package : grammarkdown Constructors constructor(text) Constructs a new instance of the LineMap class Declaration constructor(text: string); Parameters text string Properties lineCount Declaration get lineCount(): number; Property Value number Methods formatOffset(pos) Declaration formatOffset(pos: number): string; Parameters pos number Returns string getLine(line) Declaration getLine(line: number): LineInfo; Parameters line number Returns LineInfo offsetAt(position) Declaration offsetAt(position: Position): number; Parameters position Position Returns number positionAt(offset) Declaration positionAt(offset: number): Position; Parameters offset number Returns Position"
  },
  "api/grammarkdown/lineoffsetmap.html": {
    "href": "api/grammarkdown/lineoffsetmap.html",
    "title": "Class LineOffsetMap | Grammarkdown API Reference",
    "keywords": "Class LineOffsetMap Package : grammarkdown Methods getEffectiveFilenameAtPosition(sourceFile, position) Gets the effective filename of a raw position within a source file, taking into account @line directives. Declaration getEffectiveFilenameAtPosition(sourceFile: SourceFile | string, position: Position): string; Parameters sourceFile SourceFile | string position Position Returns string getEffectivePosition(sourceFile, position) Gets the effective position of a raw position within a source file, taking into account @line directives. Declaration getEffectivePosition(sourceFile: SourceFile | string, position: Position): Position; Parameters sourceFile SourceFile | string position Position Returns Position getEffectiveRange(sourceFile, range) Gets the effective range of a raw range within a source file, taking into account @line directives. Declaration getEffectiveRange(sourceFile: SourceFile | string, range: Range): Range; Parameters sourceFile SourceFile | string range Range Returns Range getRawFilenameAtEffectivePosition(filename, position) Declaration getRawFilenameAtEffectivePosition(filename: string, position: Position): string; Parameters filename string position Position Returns string getRawPositionFromEffectivePosition(filename, position) Declaration getRawPositionFromEffectivePosition(filename: string, position: Position): Position; Parameters filename string position Position Returns Position getRawRangeFromEffectiveRange(filename, range) Declaration getRawRangeFromEffectiveRange(filename: string, range: Range): Range; Parameters filename string range Range Returns Range"
  },
  "api/grammarkdown/linkreference.html": {
    "href": "api/grammarkdown/linkreference.html",
    "title": "Class LinkReference | Grammarkdown API Reference",
    "keywords": "Class LinkReference Package : grammarkdown Inheritance Node < SyntaxKind.LinkReference > LinkReference Constructors constructor(text) Constructs a new instance of the LinkReference class Declaration constructor(text: string | undefined); Parameters text string | undefined Properties edgeCount Declaration protected get edgeCount(): number; Property Value number text Declaration readonly text: string | undefined; Property Value string | undefined Methods accept(visitor) Declaration protected accept(visitor: NodeVisitor): LinkReference; Parameters visitor NodeVisitor Returns LinkReference children() Declaration children(): IterableIterator<Node>; Returns IterableIterator < Node > edgeName(_offset) Declaration protected edgeName(_offset: number): undefined; Parameters _offset number Returns undefined edgeValue(_offset) Declaration protected edgeValue(_offset: number): undefined; Parameters _offset number Returns undefined forEachChild(_cbNode) Declaration forEachChild<T>(_cbNode: (node: Node) => T | undefined): T | undefined; Type Parameters T Parameters _cbNode (node: Node ) => T | undefined Returns T | undefined"
  },
  "api/grammarkdown/lookaheadassertion.html": {
    "href": "api/grammarkdown/lookaheadassertion.html",
    "title": "Class LookaheadAssertion | Grammarkdown API Reference",
    "keywords": "Class LookaheadAssertion Package : grammarkdown Represents a lookahead assertion, which is a zero-width assertion that only matches if the next token is in the requested set. [lookahead ∉ { `class`, `let` }] Inheritance AssertionBase < SyntaxKind.LookaheadAssertion , SyntaxKind.OpenBracketToken > LookaheadAssertion Constructors constructor(openBracketToken, lookaheadKeyword, operatorToken, lookahead, closeBracketToken) Constructs a new instance of the LookaheadAssertion class Declaration constructor(openBracketToken: Token<SyntaxKind.OpenBracketToken>, lookaheadKeyword: Token<SyntaxKind.LookaheadKeyword>, operatorToken: Token<LookaheadOperatorKind> | undefined, lookahead: SymbolSpan | SymbolSet | undefined, closeBracketToken: Token<SyntaxKind.CloseBracketToken> | undefined); Parameters openBracketToken Token < SyntaxKind.OpenBracketToken > lookaheadKeyword Token < SyntaxKind.LookaheadKeyword > operatorToken Token < LookaheadOperatorKind > | undefined lookahead SymbolSpan | SymbolSet | undefined closeBracketToken Token < SyntaxKind.CloseBracketToken > | undefined Properties edgeCount Declaration protected get edgeCount(): number; Property Value number lastChild Declaration get lastChild(): Node | undefined; Property Value Node | undefined lookahead Declaration readonly lookahead: SymbolSpan | SymbolSet | undefined; Property Value SymbolSpan | SymbolSet | undefined lookaheadKeyword Declaration readonly lookaheadKeyword: Token<SyntaxKind.LookaheadKeyword>; Property Value Token < SyntaxKind.LookaheadKeyword > operatorToken Declaration readonly operatorToken: Token<LookaheadOperatorKind> | undefined; Property Value Token < LookaheadOperatorKind > | undefined Methods accept(visitor) Declaration protected accept(visitor: NodeVisitor): LookaheadAssertion; Parameters visitor NodeVisitor Returns LookaheadAssertion children() Declaration children(): IterableIterator<Node>; Returns IterableIterator < Node > edgeName(offset) Declaration protected edgeName(offset: number): string | undefined; Parameters offset number Returns string | undefined edgeValue(offset) Declaration protected edgeValue(offset: number): Node | ReadonlyArray<Node> | undefined; Parameters offset number Returns Node | ReadonlyArray < Node > | undefined forEachChild(cbNode) Declaration forEachChild<T>(cbNode: (node: Node) => T | undefined): T | undefined; Type Parameters T Parameters cbNode (node: Node ) => T | undefined Returns T | undefined update(lookahead) Declaration update(lookahead: SymbolSpan | SymbolSet | undefined): LookaheadAssertion; Parameters lookahead SymbolSpan | SymbolSet | undefined Returns LookaheadAssertion"
  },
  "api/grammarkdown/markdownemitter.html": {
    "href": "api/grammarkdown/markdownemitter.html",
    "title": "Class MarkdownEmitter | Grammarkdown API Reference",
    "keywords": "Class MarkdownEmitter Package : grammarkdown Inheritance Emitter MarkdownEmitter Properties extension Declaration protected extension: string; Property Value string Methods afterEmitNode(node) Declaration protected afterEmitNode(node: Node): void; Parameters node Node Returns void emitArgument(node) Declaration protected emitArgument(node: Argument): void; Parameters node Argument Returns void emitArgumentList(node) Declaration protected emitArgumentList(node: ArgumentList): void; Parameters node ArgumentList Returns void emitButNotSymbol(node) Declaration protected emitButNotSymbol(node: ButNotSymbol): void; Parameters node ButNotSymbol Returns void emitConstraints(node) Declaration protected emitConstraints(node: Constraints): void; Parameters node Constraints Returns void emitEmptyAssertion(node) Declaration protected emitEmptyAssertion(node: EmptyAssertion): void; Parameters node EmptyAssertion Returns void emitKeyword(node) Declaration protected emitKeyword(node: Node): void; Parameters node Node Returns void emitLexicalGoalAssertion(node) Declaration protected emitLexicalGoalAssertion(node: LexicalGoalAssertion): void; Parameters node LexicalGoalAssertion Returns void emitLookaheadAssertion(node) Declaration protected emitLookaheadAssertion(node: LookaheadAssertion): void; Parameters node LookaheadAssertion Returns void emitNonterminal(node) Declaration protected emitNonterminal(node: Nonterminal): void; Parameters node Nonterminal Returns void emitNoSymbolHereAssertion(node) Declaration protected emitNoSymbolHereAssertion(node: NoSymbolHereAssertion): void; Parameters node NoSymbolHereAssertion Returns void emitOneOfList(node) Declaration protected emitOneOfList(node: OneOfList): void; Parameters node OneOfList Returns void emitOneOfSymbol(node) Declaration protected emitOneOfSymbol(node: OneOfSymbol): void; Parameters node OneOfSymbol Returns void emitParameter(node) Declaration protected emitParameter(node: Parameter): void; Parameters node Parameter Returns void emitParameterList(node) Declaration protected emitParameterList(node: ParameterList): void; Parameters node ParameterList Returns void emitProduction(node) Declaration protected emitProduction(node: Production): void; Parameters node Production Returns void emitProse(node) Declaration protected emitProse(node: Prose): void; Parameters node Prose Returns void emitProseAssertion(node) Declaration protected emitProseAssertion(node: ProseAssertion): void; Parameters node ProseAssertion Returns void emitRightHandSide(node) Declaration protected emitRightHandSide(node: RightHandSide): void; Parameters node RightHandSide Returns void emitRightHandSideList(node) Declaration protected emitRightHandSideList(node: RightHandSideList): void; Parameters node RightHandSideList Returns void emitSymbolSet(node) Declaration protected emitSymbolSet(node: SymbolSet): void; Parameters node SymbolSet Returns void emitSymbolSpan(node) Declaration protected emitSymbolSpan(node: SymbolSpan): void; Parameters node SymbolSpan Returns void emitTerminal(node) Declaration protected emitTerminal(node: Terminal): void; Parameters node Terminal Returns void emitTerminalLiteral(node) Declaration protected emitTerminalLiteral(node: TerminalLiteral): void; Parameters node TerminalLiteral Returns void emitTextContent(node) Declaration protected emitTextContent(node: TextContent): void; Parameters node TextContent Returns void emitUnicodeCharacterLiteral(node) Declaration protected emitUnicodeCharacterLiteral(node: UnicodeCharacterLiteral): void; Parameters node UnicodeCharacterLiteral Returns void emitUnicodeCharacterRange(node) Declaration protected emitUnicodeCharacterRange(node: UnicodeCharacterRange): void; Parameters node UnicodeCharacterRange Returns void"
  },
  "api/grammarkdown/metaelementbase.html": {
    "href": "api/grammarkdown/metaelementbase.html",
    "title": "Class MetaElementBase | Grammarkdown API Reference",
    "keywords": "Class MetaElementBase Package : grammarkdown Inheritance SourceElementBase <TKind> MetaElementBase Constructors constructor(kind, atToken) Constructs a new instance of the MetaElementBase class Declaration constructor(kind: TKind, atToken: Token<SyntaxKind.AtToken>); Parameters kind TKind atToken Token < SyntaxKind.AtToken > Properties atToken Declaration readonly atToken: Token<SyntaxKind.AtToken>; Property Value Token < SyntaxKind.AtToken > firstChild Declaration get firstChild(): Node | undefined; Property Value Node | undefined"
  },
  "api/grammarkdown/multilinecommenttrivia.html": {
    "href": "api/grammarkdown/multilinecommenttrivia.html",
    "title": "Class MultiLineCommentTrivia | Grammarkdown API Reference",
    "keywords": "Class MultiLineCommentTrivia Package : grammarkdown Represents a multi-line comment trivia token. Inheritance CommentTriviaBase < SyntaxKind.MultiLineCommentTrivia > MultiLineCommentTrivia Constructors constructor() Constructs a new instance of the MultiLineCommentTrivia class Declaration constructor();"
  },
  "api/grammarkdown/newlinekind.html": {
    "href": "api/grammarkdown/newlinekind.html",
    "title": "Enum NewLineKind | Grammarkdown API Reference",
    "keywords": "Enum NewLineKind Package : grammarkdown Indicates the token to use for line terminators during emit. Fields Name Value Description CarriageReturnLineFeed 1 Lines should be terminted with a carriage-return followed by a line-feed (DOS-style). LineFeed 0 Lines should be terminated with a line-feed (Unix-style)."
  },
  "api/grammarkdown/node.html": {
    "href": "api/grammarkdown/node.html",
    "title": "Class Node | Grammarkdown API Reference",
    "keywords": "Class Node Package : grammarkdown Constructors constructor(kind) Constructs a new instance of the Node class Declaration constructor(kind: TKind); Parameters kind TKind Properties detachedTrivia Detached trivia is any trivia that occurs prior to the node that is not the leading or trailing trivia of this or any other node. Declaration get detachedTrivia(): readonly Trivia[] | undefined; Property Value readonly Trivia [] | undefined edgeCount Declaration protected get edgeCount(): number; Property Value number end Declaration get end(): number; Property Value number firstChild Declaration get firstChild(): Node | undefined; Property Value Node | undefined kind Declaration readonly kind: TKind; Property Value TKind lastChild Declaration get lastChild(): Node | undefined; Property Value Node | undefined leadingHtmlTrivia Warning Deprecated Use or instead. Declaration get leadingHtmlTrivia(): readonly HtmlTrivia[] | undefined; Property Value readonly HtmlTrivia [] | undefined leadingTrivia Leading trivia is trivia that belongs to the beginning of the node: - An HTML close tag trivia, or any trivia preceding an HTML close tag trivia, is not leading trivia of the node. - An HTML open tag trivia, and any trivia following an HTML open tag trivia, is leading trivia of the node. - If the node has a preceding line break, then - Any other non-HTML tag trivia on the same line as the node that precedes the node is leading trivia of the node. - Any other non-HTML tag trivia on a line that precedes the node, but not preceding a blank line, is leading trivia of the node. - Otherwise, - Any other non-HTML tag trivia on the same line as the node that precedes the node is leading trivia, if there is no whitespace between that trivia and the node. Declaration get leadingTrivia(): readonly Trivia[] | undefined; Property Value readonly Trivia [] | undefined pos Declaration get pos(): number; Property Value number trailingHtmlTrivia Warning Deprecated Use instead. Declaration get trailingHtmlTrivia(): readonly HtmlTrivia[] | undefined; Property Value readonly HtmlTrivia [] | undefined trailingTrivia Trailing trivia is trivia that belongs to the end of the node: - An HTML open tag trivia, or any trivia following an HTML open tag trivia, is not trailing trivia of the node. - An HTML close tag trivia, and any trivia preceding an HTML close tag trivia, is trailing trivia of the node. - If the node has a trailing line break, then - Any other non-HTML tag trivia on the same line as the node that follows the node is trailing trivia of the node. - Any other non-HTML tag trivia on a line that follows the node, but not following a blank line, is trailing trivia of the node. - Otherwise, - Any other non-HTML tag trivia on the same line as the node that follows the node is trailing trivia, if there is no whitespace between that trivia and the node. Declaration get trailingTrivia(): readonly Trivia[] | undefined; Property Value readonly Trivia [] | undefined Methods accept(visitor) Declaration protected accept(visitor: NodeVisitor): Node; Parameters visitor NodeVisitor Returns Node children() Declaration children(): IterableIterator<Node>; Returns IterableIterator < Node > edgeName(offset) Declaration protected edgeName(offset: number): string | undefined; Parameters offset number Returns string | undefined edgeValue(offset) Declaration protected edgeValue(offset: number): Node | ReadonlyArray<Node> | undefined; Parameters offset number Returns Node | ReadonlyArray < Node > | undefined forEachChild(cbNode) Declaration forEachChild<T>(cbNode: (node: Node) => T | undefined): T | undefined; Type Parameters T Parameters cbNode (node: Node ) => T | undefined Returns T | undefined getEnd() Declaration getEnd(): number; Returns number getFullStart() Declaration getFullStart(): number; Returns number getFullText(sourceFile) Declaration getFullText(sourceFile: SourceFile): string; Parameters sourceFile SourceFile Returns string getFullWidth() Declaration getFullWidth(): number; Returns number getStart(sourceFile) Declaration getStart(sourceFile?: SourceFile): number; Parameters sourceFile SourceFile Returns number getText(sourceFile) Declaration getText(sourceFile: SourceFile): string; Parameters sourceFile SourceFile Returns string getWidth(sourceFile) Declaration getWidth(sourceFile?: SourceFile): number; Parameters sourceFile SourceFile Returns number"
  },
  "api/grammarkdown/nodeasynchost.html": {
    "href": "api/grammarkdown/nodeasynchost.html",
    "title": "Class NodeAsyncHost | Grammarkdown API Reference",
    "keywords": "Class NodeAsyncHost Package : grammarkdown Inheritance CoreAsyncHost NodeAsyncHost Constructors constructor(options) Constructs a new instance of the NodeAsyncHost class Declaration constructor(options?: NodeAsyncHostOptions); Parameters options NodeAsyncHostOptions"
  },
  "api/grammarkdown/nodeasynchostoptions.html": {
    "href": "api/grammarkdown/nodeasynchostoptions.html",
    "title": "Interface NodeAsyncHostOptions | Grammarkdown API Reference",
    "keywords": "Interface NodeAsyncHostOptions Package : grammarkdown Properties allowUris Declaration allowUris?: false; Property Value false ignoreCase Indicates whether the host is case-insensitive ( true <!-- --> ) or case-sensitive ( false <!-- --> ). Declaration ignoreCase?: boolean; Property Value boolean knownGrammars A set of known grammars in the form { \"name\": \"path\" } Declaration knownGrammars?: Record<string, string>; Property Value Record <string, string> readFile Declaration readFile?: ReadFileCallback | false; Property Value ReadFileCallback | false useBuiltinGrammars Indicates whether to include builtin grammars in the set of known grammars. Declaration useBuiltinGrammars?: boolean; Property Value boolean writeFile Declaration writeFile?: WriteFileCallback | false; Property Value WriteFileCallback | false"
  },
  "api/grammarkdown/nodenavigator.html": {
    "href": "api/grammarkdown/nodenavigator.html",
    "title": "Class NodeNavigator | Grammarkdown API Reference",
    "keywords": "Class NodeNavigator Package : grammarkdown Navigates the syntax-tree of a SourceFile <!-- --> . Remarks Nodes in Grammarkdown's syntax tree are immutable and do not maintain pointers to their parents. This can make traversing through a document somewhat difficult. The NodeNavigator class is intended to improve this process by providing an API that can traverse a syntax tree starting from the root. A NodeNavigator focuses on a specific Node within a syntax tree, and maintains the path to that node from the root. Various methods on the navigator move the focus, allowing you to navigate to any other node within the syntax tree. Constructors constructor(sourceFile) Constructs a new instance of the NodeNavigator class Declaration constructor(sourceFile: SourceFile); Parameters sourceFile SourceFile The SourceFile to use as the root of the navigator. constructor(other) Constructs a new instance of the NodeNavigator class Declaration constructor(other: NodeNavigator); Parameters other NodeNavigator A NodeNavigator whose position information is used to create this navigator. Methods ancestors(predicate) Creates an iterator for the ancestors of the focused Node <!-- --> . Declaration ancestors(predicate?: (ancestor: Node) => boolean): IterableIterator<Node>; Parameters predicate (ancestor: Node ) => boolean An optional callback that can be used to filter the ancestors of the node. Returns IterableIterator < Node > ancestors(kind) Creates an iterator for the parse tree ancestors of the focused Node <!-- --> . Declaration ancestors(kind: SyntaxKind): IterableIterator<Node>; Parameters kind SyntaxKind The SyntaxKind that any yielded ancestor must match. Returns IterableIterator < Node > children(predicate) Creates an iterator for the parse tree children of the focused Node <!-- --> . Declaration children(predicate?: (child: Node) => boolean): IterableIterator<Node>; Parameters predicate (child: Node ) => boolean An optional callback that can be used to filter the children of the node. Returns IterableIterator < Node > Remarks This does not account for tokens not included in the parse tree. children(kind) Creates an iterator for the parse tree children of the focused Node <!-- --> . Declaration children(kind: SyntaxKind): IterableIterator<Node>; Parameters kind SyntaxKind The SyntaxKind that any yielded child must match. Returns IterableIterator < Node > Remarks This does not account for tokens not included in the parse tree. clone() Creates a copy of this NodeNavigator at the same position. Declaration clone(): NodeNavigator; Returns NodeNavigator getArray() Gets the containing node array of Node the navigator is currently focused on. Declaration getArray(): readonly Node<SyntaxKind>[] | undefined; Returns readonly Node < SyntaxKind >[] | undefined getDepth() Gets the current depth within the syntax-tree of the current focus of the navigator. Declaration getDepth(): number; Returns number getKind() Gets the SyntaxKind of the Node the navigator is currently focused on. Declaration getKind(): SyntaxKind; Returns SyntaxKind getKindString() Gets the string representation of the SyntaxKind of the Node the navigator is currently focused on. Declaration getKindString(): string; Returns string getName() Gets the name of the property on the parent Node the navigator is currently focused on. Declaration getName(): string | undefined; Returns string | undefined getNode() Gets the Node the navigator is currently focused on. Declaration getNode(): Node<SyntaxKind>; Returns Node < SyntaxKind > getOffset() Gets the ordinal offset within the containing node array of Node the navigator is currently focused on. Declaration getOffset(): number; Returns number getParent() Gets the parent Node of the Node the navigator is currently focused on. Declaration getParent(): Node<SyntaxKind> | undefined; Returns Node < SyntaxKind > | undefined getRoot() Gets the root SourceFile node for this navigator. Declaration getRoot(): SourceFile; Returns SourceFile getTextContent() If the Node the navigator is currently focused on is a TextContentNode <!-- --> , returns the text of the node; Otherwise, returns undefined <!-- --> . Declaration getTextContent(): string | undefined; Returns string | undefined hasAncestor(predicate) Determines whether the focused Node has an ancestor that matches the supplied predicate. Declaration hasAncestor(predicate?: (ancestor: Node) => boolean): boolean; Parameters predicate (ancestor: Node ) => boolean An optional callback used to filter the ancestors of the node. Returns boolean true if the focused Node contains an ancestor that matches the supplied predicate; otherwise, false <!-- --> . hasAncestor(kind) Determines whether the focused Node has an ancestor that matches the supplied predicate. Declaration hasAncestor(kind: SyntaxKind): boolean; Parameters kind SyntaxKind Returns boolean true if the focused Node contains an ancestor that matches the supplied predicate; otherwise, false <!-- --> . hasChildren(predicate) Determines whether the focused Node has any children that match the supplied predicate. Declaration hasChildren(predicate?: (child: Node) => boolean): boolean; Parameters predicate (child: Node ) => boolean An optional callback that can be used to filter the children of the node. Returns boolean true if the focused Node contains a child that matches the supplied predicate; otherwise, false <!-- --> . Remarks This does not account for tokens not included in the parse tree. hasChildren(kind) Determines whether the focused Node has any children with the provided SyntaxKind <!-- --> . Declaration hasChildren(kind: SyntaxKind): boolean; Parameters kind SyntaxKind The SyntaxKind that at least one child must match. Returns boolean true if the focused Node contains a matching child; otherwise, false <!-- --> . Remarks This does not account for tokens not included in the parse tree. hasNextSibling() Tests whether the navigator can move the focus of the navigator to the next sibling of the focused Node <!-- --> . Declaration hasNextSibling(): boolean; Returns boolean true if the navigator's focus can change; otherwise, false <!-- --> . hasNextSibling(name) Tests whether the navigator can move the focus of the navigator to the next sibling of the focused Node with the provided property name. Declaration hasNextSibling(name: string): boolean; Parameters name string The name of a property on the parent of the focused Node <!-- --> . Returns boolean true if the navigator's focus can change; otherwise, false <!-- --> . hasNextSibling(predicate) Tests whether the navigator can move the focus of the navigator to the next sibling of the focused Node that matches the provided predicate. Declaration hasNextSibling(predicate: (node: Node) => boolean): boolean; Parameters predicate (node: Node ) => boolean A callback used to match a sibling node. Returns boolean true if the navigator's focus can change; otherwise, false <!-- --> . hasNextSibling(kind) Tests whether the navigator can move the focus of the navigator to the next sibling of the focused Node matching the provided SyntaxKind <!-- --> . Declaration hasNextSibling(kind: SyntaxKind): boolean; Parameters kind SyntaxKind The SyntaxKind that the sibling must match. Returns boolean true if the navigator's focus can change; otherwise, false <!-- --> . hasPreviousSibling() Tests whether the navigator can move the focus of the navigator to the previous sibling of the focused Node <!-- --> . Declaration hasPreviousSibling(): boolean; Returns boolean true if the navigator's focus can change; otherwise, false <!-- --> . hasPreviousSibling(name) Tests whether the navigator can move the focus of the navigator to the previous sibling of the focused Node with the provided property name. Declaration hasPreviousSibling(name: string): boolean; Parameters name string The name of a property on the parent of the focused Node <!-- --> . Returns boolean true if the navigator's focus can change; otherwise, false <!-- --> . hasPreviousSibling(predicate) Tests whether the navigator can move the focus of the navigator to the previous sibling of the focused Node that matches the provided predicate. Declaration hasPreviousSibling(predicate: (sibling: Node) => boolean): boolean; Parameters predicate (sibling: Node ) => boolean A callback used to match a sibling node. Returns boolean true if the navigator's focus can change; otherwise, false <!-- --> . hasPreviousSibling(kind) Tests whether the navigator can move the focus of the navigator to the previous sibling of the focused Node matching the provided SyntaxKind <!-- --> . Declaration hasPreviousSibling(kind: SyntaxKind): boolean; Parameters kind SyntaxKind The SyntaxKind that the sibling must match. Returns boolean true if the navigator's focus can change; otherwise, false <!-- --> . isArray() Returns a value indicating whether the focus of the navigator points to a Node in an array. Declaration isArray(): boolean; Returns boolean isLeadingToken() Returns a value indicating whether the navigator is focused on a leading token of the actual current node. Declaration isLeadingToken(): boolean; Returns boolean isMatch(predicate) Determines whether the focused Node matches the supplied predicate. Declaration isMatch(predicate: (node: Node) => boolean): boolean; Parameters predicate (node: Node ) => boolean A callback used to match the focused Node <!-- --> . Returns boolean true if the focused Node matches; otherwise, false <!-- --> . isMatch(kind) Determines whether the focused Node matches the supplied SyntaxKind <!-- --> . Declaration isMatch(kind: SyntaxKind): boolean; Parameters kind SyntaxKind The SyntaxKind that the focused Node must match. Returns boolean true if the focused Node matches; otherwise, false <!-- --> . isSamePosition(other) Determines whether this navigator is focused on the same location within the tree as another navigator. Declaration isSamePosition(other: NodeNavigator): boolean; Parameters other NodeNavigator The other navigator. Returns boolean true if both navigators are focused on the same location within the tree; otherwise, false <!-- --> . isToken() Returns a value indicating whether the focus of the navigator points to either a Token <!-- --> , TextContentNode <!-- --> , or InvalidSymbol (as long as that InvalidSymbol has no trailing tokens). Declaration isToken(): boolean; Returns boolean isTrailingToken() Returns a value indicating whether the navigator is focused on a trailing token of the actual current node. Declaration isTrailingToken(): boolean; Returns boolean moveTo(other) Moves the focus of this navigator to the same position within the syntax tree as another navigator. Declaration moveTo(other: NodeNavigator): boolean; Parameters other NodeNavigator The other navigator. Returns boolean true if the navigator's focus changed; otherwise, false <!-- --> . moveToAncestor(predicate) Moves the focus of the navigator to the nearest ancestor matching the supplied predicate. Declaration moveToAncestor(predicate: (ancestor: Node) => boolean): boolean; Parameters predicate (ancestor: Node ) => boolean A callback used to match an ancestor. Returns boolean true if the navigator's focus changed; otherwise, false <!-- --> . moveToAncestor(kind) Moves the focus of the navigator to the nearest ancestor matching the supplied SyntaxKind <!-- --> . Declaration moveToAncestor(kind: SyntaxKind): boolean; Parameters kind SyntaxKind The SyntaxKind that the ancestor must match. Returns boolean true if the navigator's focus changed; otherwise, false <!-- --> . moveToAncestorOrSelf(predicate) Moves the focus of the navigator to the nearest ancestor matching the supplied predicate. If the current node matches the predicate, the focus does not change. Declaration moveToAncestorOrSelf(predicate: (ancestorOrSelf: Node) => boolean): boolean; Parameters predicate (ancestorOrSelf: Node ) => boolean A callback used to match an ancestor. Returns boolean true if the current node matched the predicate or the navigator's focus changed; otherwise, false <!-- --> . moveToAncestorOrSelf(kind) Moves the focus of the navigator to the nearest ancestor matching the supplied predicate. If the current node matches the predicate, the focus does not change. Declaration moveToAncestorOrSelf(kind: SyntaxKind): boolean; Parameters kind SyntaxKind The SyntaxKind that the focused Node or one of its ancestors must match. Returns boolean true if the current node matched the predicate or the navigator's focus changed; otherwise, false <!-- --> . moveToDeclaration() Moves the focus of the navigator to the parent of the focused Node if that parent is either a Parameter or a Production <!-- --> . Declaration moveToDeclaration(): boolean; Returns boolean true if the navigator's focus changed; otherwise, false <!-- --> . moveToFirstChild() Moves the focus of the navigator to the first child of the focused Node <!-- --> . Declaration moveToFirstChild(): boolean; Returns boolean true if the navigator's focus changed; otherwise, false <!-- --> . moveToFirstChild(name) Moves the focus of the navigator to the first child of the focused Node with the provided property name. Declaration moveToFirstChild(name: string): boolean; Parameters name string The name of the property on the focused Node <!-- --> . Returns boolean true if the navigator's focus changed; otherwise, false <!-- --> . moveToFirstChild(predicate) Moves the focus of the navigator to the first child of the focused Node matching the supplied predicate. Declaration moveToFirstChild(predicate: (child: Node) => boolean): boolean; Parameters predicate (child: Node ) => boolean A callback used to match a child node. Returns boolean true if the navigator's focus changed; otherwise, false <!-- --> . moveToFirstChild(kind) Moves the focus of the navigator to the first child of the focused Node matching the provided SyntaxKind <!-- --> . Declaration moveToFirstChild(kind: SyntaxKind): boolean; Parameters kind SyntaxKind The SyntaxKind that the child must match. Returns boolean true if the navigator's focus changed; otherwise, false <!-- --> . moveToFirstElement(predicate) Moves the focus of the navigator to the first element of the containing array of the focused Node matching the supplied predicate. Declaration moveToFirstElement(predicate?: (element: Node) => boolean): boolean; Parameters predicate (element: Node ) => boolean A callback used to match a node. Returns boolean true if the navigator's focus changed; otherwise, false <!-- --> . moveToFirstElement(kind) Moves the focus of the navigator to the first element of the containing array of the focused Node matching the provided SyntaxKind <!-- --> . Declaration moveToFirstElement(kind: SyntaxKind): boolean; Parameters kind SyntaxKind The SyntaxKind that the element must match. Returns boolean true if the navigator's focus changed; otherwise, false <!-- --> . moveToFirstSibling() Moves the focus of the navigator to the first sibling of the focused Node <!-- --> . Declaration moveToFirstSibling(): boolean; Returns boolean true if the navigator's focus changed; otherwise, false <!-- --> . moveToFirstSibling(name) Moves the focus of the navigator to the first sibling of the focused Node with the provided property name. Declaration moveToFirstSibling(name: string): boolean; Parameters name string The name of a property on the parent of the focused Node <!-- --> . Returns boolean true if the navigator's focus changed; otherwise, false <!-- --> . moveToFirstSibling(predicate) Moves the focus of the navigator to the first sibling of the focused Node that matches the provided predicate. Declaration moveToFirstSibling(predicate: (sibling: Node) => boolean): boolean; Parameters predicate (sibling: Node ) => boolean A callback used to match a sibling node. Returns boolean true if the navigator's focus changed; otherwise, false <!-- --> . moveToFirstSibling(kind) Moves the focus of the navigator to the first sibling of the focused Node matching the provided SyntaxKind <!-- --> . Declaration moveToFirstSibling(kind: SyntaxKind): boolean; Parameters kind SyntaxKind The SyntaxKind that the sibling must match. Returns boolean true if the navigator's focus changed; otherwise, false <!-- --> . moveToFirstToken() Moves the focus of the navigator to the first Token <!-- --> , TextContent or InvalidSymbol descendant (or self) of the focused Node <!-- --> . Declaration moveToFirstToken(): boolean; Returns boolean true if the current focus is a Token <!-- --> , TextContent or InvalidSymbol or if the navigator's focus changed; otherwise, false <!-- --> . moveToFirstToken(predicate) Moves the focus of the navigator to the first Token <!-- --> , TextContent or InvalidSymbol descendant (or self) of the focused Node <!-- --> . Declaration moveToFirstToken(predicate: (node: Node) => boolean): boolean; Parameters predicate (node: Node ) => boolean A callback used to match a token node. Returns boolean true if the current focus is a Token <!-- --> , TextContent or InvalidSymbol or if the navigator's focus changed; otherwise, false <!-- --> . moveToFirstToken(kind) Moves the focus of the navigator to the first Token <!-- --> , TextContent or InvalidSymbol descendant (or self) of the focused Node <!-- --> . Declaration moveToFirstToken(kind: SyntaxKind): boolean; Parameters kind SyntaxKind The SyntaxKind that the previous token must match. Returns boolean true if the current focus is a Token <!-- --> , TextContent or InvalidSymbol or if the navigator's focus changed; otherwise, false <!-- --> . moveToLastChild() Moves the focus of the navigator to the last child of the focused Node <!-- --> . Declaration moveToLastChild(): boolean; Returns boolean true if the navigator's focus changed; otherwise, false <!-- --> . moveToLastChild(name) Moves the focus of the navigator to the last child of the focused Node with the provided property name. Declaration moveToLastChild(name: string): boolean; Parameters name string The name of the property on the focused Node <!-- --> . Returns boolean true if the navigator's focus changed; otherwise, false <!-- --> . moveToLastChild(predicate) Moves the focus of the navigator to the last child of the focused Node matching the supplied predicate. Declaration moveToLastChild(predicate: (node: Node) => boolean): boolean; Parameters predicate (node: Node ) => boolean A callback used to match a child node. Returns boolean true if the navigator's focus changed; otherwise, false <!-- --> . moveToLastChild(kind) Moves the focus of the navigator to the last child of the focused Node matching the provided SyntaxKind <!-- --> . Declaration moveToLastChild(kind: SyntaxKind): boolean; Parameters kind SyntaxKind The SyntaxKind that the child must match. Returns boolean true if the navigator's focus changed; otherwise, false <!-- --> . moveToLastElement(predicate) Moves the focus of the navigator to the last element of the containing array of the focused Node matching the supplied predicate. Declaration moveToLastElement(predicate?: (node: Node) => boolean): boolean; Parameters predicate (node: Node ) => boolean A callback used to match a node. Returns boolean true if the navigator's focus changed; otherwise, false <!-- --> . moveToLastElement(kind) Moves the focus of the navigator to the last element of the containing array of the focused Node matching the provided SyntaxKind <!-- --> . Declaration moveToLastElement(kind: SyntaxKind): boolean; Parameters kind SyntaxKind The SyntaxKind that the element must match. Returns boolean true if the navigator's focus changed; otherwise, false <!-- --> . moveToLastSibling() Moves the focus of the navigator to the last sibling of the focused Node <!-- --> . Declaration moveToLastSibling(): boolean; Returns boolean true if the navigator's focus changed; otherwise, false <!-- --> . moveToLastSibling(name) Moves the focus of the navigator to the last sibling of the focused Node with the provided property name. Declaration moveToLastSibling(name: string): boolean; Parameters name string The name of a property on the parent of the focused Node <!-- --> . Returns boolean true if the navigator's focus changed; otherwise, false <!-- --> . moveToLastSibling(predicate) Moves the focus of the navigator to the last sibling of the focused Node that matches the provided predicate. Declaration moveToLastSibling(predicate: (node: Node) => boolean): boolean; Parameters predicate (node: Node ) => boolean A callback used to match a sibling node. Returns boolean true if the navigator's focus changed; otherwise, false <!-- --> . moveToLastSibling(kind) Moves the focus of the navigator to the last sibling of the focused Node matching the provided SyntaxKind <!-- --> . Declaration moveToLastSibling(kind: SyntaxKind): boolean; Parameters kind SyntaxKind The SyntaxKind that the sibling must match. Returns boolean true if the navigator's focus changed; otherwise, false <!-- --> . moveToLastToken() Moves the focus of the navigator to the last Token <!-- --> , TextContent or InvalidSymbol descendant (or self) of the focused Node <!-- --> . Declaration moveToLastToken(): boolean; Returns boolean true if the current focus is a Token <!-- --> , TextContent or InvalidSymbol or if the navigator's focus changed; otherwise, false <!-- --> . moveToLastToken(predicate) Moves the focus of the navigator to the last Token <!-- --> , TextContent or InvalidSymbol descendant (or self) of the focused Node <!-- --> . Declaration moveToLastToken(predicate: (node: Node) => boolean): boolean; Parameters predicate (node: Node ) => boolean A callback used to match a token node. Returns boolean true if the current focus is a Token <!-- --> , TextContent or InvalidSymbol or if the navigator's focus changed; otherwise, false <!-- --> . moveToLastToken(kind) Moves the focus of the navigator to the last Token <!-- --> , TextContent or InvalidSymbol descendant (or self) of the focused Node <!-- --> . Declaration moveToLastToken(kind: SyntaxKind): boolean; Parameters kind SyntaxKind The SyntaxKind that the previous token must match. Returns boolean true if the current focus is a Token <!-- --> , TextContent or InvalidSymbol or if the navigator's focus changed; otherwise, false <!-- --> . moveToName() Moves the focus of the navigator to the nearest Identifier <!-- --> . Declaration moveToName(): boolean; Returns boolean true if the current node is an Identifier or the navigator's focus changed; otherwise, false <!-- --> . Remarks The \"nearest Identifier <!-- --> \" is determined using the following rules: If the focus or its nearest ancestor is a Parameter <!-- --> , move to the name of the Parameter <!-- --> . If the focus or its nearest ancestor is an Argument <!-- --> , move to the name of the Argument <!-- --> . If the focus or its nearest ancestor is a Nonterminal <!-- --> , move to the name of the Nonterminal <!-- --> . If the focus or its nearest ancestor is a LexicalGoalAssertion <!-- --> , move to the symbol of the of the LexicalGoalAssertion <!-- --> . If the focus or its nearest ancestor is a Define <!-- --> , move to the key of the Define <!-- --> . If the focus or its nearest ancestor is a Constraints <!-- --> , move to the name of the of the first Argument of the Constraints <!-- --> . If the focus is not within the body of a Production and the focus or its nearest ancestor is a Production <!-- --> , move to the name of the Production <!-- --> . moveToNextElement(predicate) Moves the focus of the navigator to the next element in the containing array of the focused Node matching the supplied predicate. Declaration moveToNextElement(predicate?: (node: Node) => boolean): boolean; Parameters predicate (node: Node ) => boolean A callback used to match a node. Returns boolean true if the navigator's focus changed; otherwise, false <!-- --> . moveToNextElement(kind) Moves the focus of the navigator to the next element in the containing array of the focused Node matching the provided SyntaxKind <!-- --> . Declaration moveToNextElement(kind: SyntaxKind): boolean; Parameters kind SyntaxKind The SyntaxKind that the element must match. Returns boolean true if the navigator's focus changed; otherwise, false <!-- --> . moveToNextSibling() Moves the focus of the navigator to the next sibling of the focused Node <!-- --> . Declaration moveToNextSibling(): boolean; Returns boolean true if the navigator's focus changed; otherwise, false <!-- --> . moveToNextSibling(name) Moves the focus of the navigator to the next sibling of the focused Node with the provided property name. Declaration moveToNextSibling(name: string): boolean; Parameters name string The name of a property on the parent of the focused Node <!-- --> . Returns boolean true if the navigator's focus changed; otherwise, false <!-- --> . moveToNextSibling(predicate) Moves the focus of the navigator to the next sibling of the focused Node that matches the provided predicate. Declaration moveToNextSibling(predicate: (node: Node) => boolean): boolean; Parameters predicate (node: Node ) => boolean A callback used to match a sibling node. Returns boolean true if the navigator's focus changed; otherwise, false <!-- --> . moveToNextSibling(kind) Moves the focus of the navigator to the next sibling of the focused Node matching the provided SyntaxKind <!-- --> . Declaration moveToNextSibling(kind: SyntaxKind): boolean; Parameters kind SyntaxKind The SyntaxKind that the sibling must match. Returns boolean true if the navigator's focus changed; otherwise, false <!-- --> . moveToNextToken() Moves the focus of the navigator to the next Token <!-- --> , TextContent or InvalidSymbol following the focused Node in document order. Declaration moveToNextToken(): boolean; Returns boolean true if the current focus is a Token <!-- --> , TextContent or InvalidSymbol or if the navigator's focus changed; otherwise, false <!-- --> . moveToNextToken(predicate) Moves the focus of the navigator to the next Token <!-- --> , TextContent or InvalidSymbol following the focused Node in document order. Declaration moveToNextToken(predicate: (node: Node) => boolean): boolean; Parameters predicate (node: Node ) => boolean A callback used to match a token node. Returns boolean true if the current focus is a Token <!-- --> , TextContent or InvalidSymbol or if the navigator's focus changed; otherwise, false <!-- --> . moveToNextToken(kind) Moves the focus of the navigator to the next Token <!-- --> , TextContent or InvalidSymbol following the focused Node in document order. Declaration moveToNextToken(kind: SyntaxKind): boolean; Parameters kind SyntaxKind The SyntaxKind that the previous token must match. Returns boolean true if the current focus is a Token <!-- --> , TextContent or InvalidSymbol or if the navigator's focus changed; otherwise, false <!-- --> . moveToParent(predicate) Moves the focus of the navigator to the parent Node of the focused Node <!-- --> . Declaration moveToParent(predicate?: (parent: Node) => boolean): boolean; Parameters predicate (parent: Node ) => boolean An optional callback that determines whether the focus should move to the parent node. Returns boolean true if the navigator's focus changed; otherwise, false <!-- --> . moveToParent(kind) Moves the focus of the navigator to the parent Node of the focused Node <!-- --> . Declaration moveToParent(kind: SyntaxKind): boolean; Parameters kind SyntaxKind The required SyntaxKind of the parent node. Returns boolean true if the navigator's focus changed; otherwise, false <!-- --> . moveToPosition(position, outermost) Moves the focus of the navigator to the Node that contains the provided [Position](xref:grammarkdown!Position:interface). Declaration moveToPosition(position: Position, outermost?: boolean): boolean; Parameters position Position The [Position](xref:grammarkdown!Position:interface) at which to focus the navigator. outermost boolean When true <!-- --> , moves to the outermost node containing the provided position. When false or not specified, moves to the innermost node containing the provided position. Returns boolean true if the navigator's focus changed; otherwise, false <!-- --> . moveToPreviousElement(predicate) Moves the focus of the navigator to the previous element in the containing array of the focused Node matching the supplied predicate. Declaration moveToPreviousElement(predicate?: (node: Node) => boolean): boolean; Parameters predicate (node: Node ) => boolean A callback used to match a node. Returns boolean true if the navigator's focus changed; otherwise, false <!-- --> . moveToPreviousElement(kind) Moves the focus of the navigator to the previous element in the containing array of the focused Node matching the provided SyntaxKind <!-- --> . Declaration moveToPreviousElement(kind: SyntaxKind): boolean; Parameters kind SyntaxKind The SyntaxKind that the element must match. Returns boolean true if the navigator's focus changed; otherwise, false <!-- --> . moveToPreviousSibling() Moves the focus of the navigator to the previous sibling of the focused Node <!-- --> . Declaration moveToPreviousSibling(): boolean; Returns boolean true if the navigator's focus changed; otherwise, false <!-- --> . moveToPreviousSibling(name) Moves the focus of the navigator to the previous sibling of the focused Node with the provided property name. Declaration moveToPreviousSibling(name: string): boolean; Parameters name string The name of a property on the parent of the focused Node <!-- --> . Returns boolean true if the navigator's focus changed; otherwise, false <!-- --> . moveToPreviousSibling(predicate) Moves the focus of the navigator to the previous sibling of the focused Node that matches the provided predicate. Declaration moveToPreviousSibling(predicate: (sibling: Node) => boolean): boolean; Parameters predicate (sibling: Node ) => boolean A callback used to match a sibling node. Returns boolean true if the navigator's focus changed; otherwise, false <!-- --> . moveToPreviousSibling(kind) Moves the focus of the navigator to the previous sibling of the focused Node matching the provided SyntaxKind <!-- --> . Declaration moveToPreviousSibling(kind: SyntaxKind): boolean; Parameters kind SyntaxKind The SyntaxKind that the sibling must match. Returns boolean true if the navigator's focus changed; otherwise, false <!-- --> . moveToPreviousToken() Moves the focus of the navigator to the previous Token <!-- --> , TextContent or InvalidSymbol preceding the focused Node in document order. Declaration moveToPreviousToken(): boolean; Returns boolean true if the current focus is a Token <!-- --> , TextContent or InvalidSymbol or if the navigator's focus changed; otherwise, false <!-- --> . moveToPreviousToken(predicate) Moves the focus of the navigator to the previous Token <!-- --> , TextContent or InvalidSymbol preceding the focused Node in document order. Declaration moveToPreviousToken(predicate: (node: Node) => boolean): boolean; Parameters predicate (node: Node ) => boolean A callback used to match a token node. Returns boolean true if the current focus is a Token <!-- --> , TextContent or InvalidSymbol or if the navigator's focus changed; otherwise, false <!-- --> . moveToPreviousToken(kind) Moves the focus of the navigator to the previous Token <!-- --> , TextContent or InvalidSymbol preceding the focused Node in document order. Declaration moveToPreviousToken(kind: SyntaxKind): boolean; Parameters kind SyntaxKind The SyntaxKind that the previous token must match. Returns boolean true if the current focus is a Token <!-- --> , TextContent or InvalidSymbol or if the navigator's focus changed; otherwise, false <!-- --> . moveToRoot() Moves the focus of the navigator to the root of the syntax tree. Declaration moveToRoot(): boolean; Returns boolean true if the navigator's focus changed; otherwise, false <!-- --> . moveToSourceElement() Moves the focus of the navigator to the parent of the focused Node if that parent is a SourceElement <!-- --> . Declaration moveToSourceElement(): boolean; Returns boolean true if the navigator's focus changed; otherwise, false <!-- --> . moveToTouchingToken(position, predicate) Moves the focus of the navigator to the nearest Token <!-- --> , TextContentNode <!-- --> , or InvalidSymbol that is touching the provided [Position](xref:grammarkdown!Position:interface). Declaration moveToTouchingToken(position: Position, predicate?: SyntaxKind): boolean; Parameters position Position The [Position](xref:grammarkdown!Position:interface) at which to focus the navigator. predicate SyntaxKind A callback used to match a token node. Returns boolean true if the navigator's focus changed; otherwise, false <!-- --> . moveToTouchingToken(position, kind) Moves the focus of the navigator to the nearest Token <!-- --> , TextContentNode <!-- --> , or InvalidSymbol that is touching the provided [Position](xref:grammarkdown!Position:interface). Declaration moveToTouchingToken(position: Position, kind: SyntaxKind): boolean; Parameters position Position The [Position](xref:grammarkdown!Position:interface) at which to focus the navigator. kind SyntaxKind The SyntaxKind that the previous token must match. Returns boolean true if the navigator's focus changed; otherwise, false <!-- --> . tokens(predicate) Creates an iterator for the tokens of the focused Node <!-- --> . Declaration tokens(predicate?: (token: Node) => boolean): IterableIterator<Node>; Parameters predicate (token: Node ) => boolean An optional callback that can be used to filter the tokens of the node. Returns IterableIterator < Node > tokens(kind) Creates an iterator for the tokens of the focused Node <!-- --> . Declaration tokens(kind: SyntaxKind): IterableIterator<Node>; Parameters kind SyntaxKind The SyntaxKind that any yielded token must match. Returns IterableIterator < Node >"
  },
  "api/grammarkdown/nodevisitor.html": {
    "href": "api/grammarkdown/nodevisitor.html",
    "title": "Class NodeVisitor | Grammarkdown API Reference",
    "keywords": "Class NodeVisitor Package : grammarkdown Methods visit(node) Declaration visit<T extends Node>(node: T): T; Type Parameters T Parameters node T Returns T visit(node) Declaration visit<T extends Node>(node: T | undefined): T | undefined; Type Parameters T Parameters node T | undefined Returns T | undefined visitArgument(node) Declaration visitArgument(node: Argument): Argument; Parameters node Argument Returns Argument visitArgumentList(node) Declaration visitArgumentList(node: ArgumentList): ArgumentList; Parameters node ArgumentList Returns ArgumentList visitButNotSymbol(node) Declaration visitButNotSymbol(node: ButNotSymbol): ButNotSymbol; Parameters node ButNotSymbol Returns ButNotSymbol visitConstraints(node) Declaration visitConstraints(node: Constraints): Constraints; Parameters node Constraints Returns Constraints visitDefine(node) Declaration visitDefine(node: Define): Define; Parameters node Define Returns Define visitEach(nodes) Declaration visitEach<T extends Node>(nodes: ReadonlyArray<T>): ReadonlyArray<T>; Type Parameters T Parameters nodes ReadonlyArray <T> Returns ReadonlyArray <T> visitEach(nodes) Declaration visitEach<T extends Node>(nodes: ReadonlyArray<T> | undefined): ReadonlyArray<T> | undefined; Type Parameters T Parameters nodes ReadonlyArray <T> | undefined Returns ReadonlyArray <T> | undefined visitEmptyAssertion(node) Declaration visitEmptyAssertion(node: EmptyAssertion): EmptyAssertion; Parameters node EmptyAssertion Returns EmptyAssertion visitExtension(node) Declaration visitExtension<T extends Node>(node: T): T; Type Parameters T Parameters node T Returns T visitIdentifier(node) Declaration visitIdentifier(node: Identifier): Identifier; Parameters node Identifier Returns Identifier visitImport(node) Declaration visitImport(node: Import): Import; Parameters node Import Returns Import visitInvalidAssertion(node) Declaration visitInvalidAssertion(node: InvalidAssertion): InvalidAssertion; Parameters node InvalidAssertion Returns InvalidAssertion visitInvalidSymbol(node) Declaration visitInvalidSymbol(node: InvalidSymbol): InvalidSymbol; Parameters node InvalidSymbol Returns InvalidSymbol visitLexicalGoalAssertion(node) Declaration visitLexicalGoalAssertion(node: LexicalGoalAssertion): LexicalGoalAssertion; Parameters node LexicalGoalAssertion Returns LexicalGoalAssertion visitLine(node) Declaration visitLine(node: Line): Line; Parameters node Line Returns Line visitLinkReference(node) Declaration visitLinkReference(node: LinkReference): LinkReference; Parameters node LinkReference Returns LinkReference visitLookaheadAssertion(node) Declaration visitLookaheadAssertion(node: LookaheadAssertion): LookaheadAssertion; Parameters node LookaheadAssertion Returns LookaheadAssertion visitNonterminal(node) Declaration visitNonterminal(node: Nonterminal): Nonterminal; Parameters node Nonterminal Returns Nonterminal visitNoSymbolHereAssertion(node) Declaration visitNoSymbolHereAssertion(node: NoSymbolHereAssertion): NoSymbolHereAssertion; Parameters node NoSymbolHereAssertion Returns NoSymbolHereAssertion visitNumberLiteral(node) Declaration visitNumberLiteral(node: NumberLiteral): NumberLiteral; Parameters node NumberLiteral Returns NumberLiteral visitOneOfList(node) Declaration visitOneOfList(node: OneOfList): OneOfList; Parameters node OneOfList Returns OneOfList visitOneOfSymbol(node) Declaration visitOneOfSymbol(node: OneOfSymbol): OneOfSymbol; Parameters node OneOfSymbol Returns OneOfSymbol visitParameter(node) Declaration visitParameter(node: Parameter): Parameter; Parameters node Parameter Returns Parameter visitParameterList(node) Declaration visitParameterList(node: ParameterList): ParameterList; Parameters node ParameterList Returns ParameterList visitPlaceholderSymbol(node) Declaration visitPlaceholderSymbol(node: PlaceholderSymbol): PlaceholderSymbol; Parameters node PlaceholderSymbol Returns PlaceholderSymbol visitProduction(node) Declaration visitProduction(node: Production): Production; Parameters node Production Returns Production visitProse(node) Declaration visitProse(node: Prose): Prose; Parameters node Prose Returns Prose visitProseAssertion(node) Declaration visitProseAssertion(node: ProseAssertion): ProseAssertion; Parameters node ProseAssertion Returns ProseAssertion visitProseFragmentLiteral(node) Declaration visitProseFragmentLiteral(node: ProseFragmentLiteral): ProseFragmentLiteral; Parameters node ProseFragmentLiteral Returns ProseFragmentLiteral visitRightHandSide(node) Declaration visitRightHandSide(node: RightHandSide): RightHandSide; Parameters node RightHandSide Returns RightHandSide visitRightHandSideList(node) Declaration visitRightHandSideList(node: RightHandSideList): RightHandSideList; Parameters node RightHandSideList Returns RightHandSideList visitSourceFile(node) Declaration visitSourceFile(node: SourceFile): SourceFile; Parameters node SourceFile Returns SourceFile visitStringLiteral(node) Declaration visitStringLiteral(node: StringLiteral): StringLiteral; Parameters node StringLiteral Returns StringLiteral visitSymbolSet(node) Declaration visitSymbolSet(node: SymbolSet): SymbolSet; Parameters node SymbolSet Returns SymbolSet visitSymbolSpan(node) Declaration visitSymbolSpan(node: SymbolSpan): SymbolSpan; Parameters node SymbolSpan Returns SymbolSpan visitTerminal(node) Declaration visitTerminal(node: Terminal): Terminal; Parameters node Terminal Returns Terminal visitTerminalLiteral(node) Declaration visitTerminalLiteral(node: TerminalLiteral): TerminalLiteral; Parameters node TerminalLiteral Returns TerminalLiteral visitToken(node) Declaration visitToken<TKind extends TokenKind>(node: Token<TKind>): Token<TKind>; Type Parameters TKind Parameters node Token <TKind> Returns Token <TKind> visitUnicodeCharacterLiteral(node) Declaration visitUnicodeCharacterLiteral(node: UnicodeCharacterLiteral): UnicodeCharacterLiteral; Parameters node UnicodeCharacterLiteral Returns UnicodeCharacterLiteral visitUnicodeCharacterRange(node) Declaration visitUnicodeCharacterRange(node: UnicodeCharacterRange): UnicodeCharacterRange; Parameters node UnicodeCharacterRange Returns UnicodeCharacterRange"
  },
  "api/grammarkdown/nonterminal.html": {
    "href": "api/grammarkdown/nonterminal.html",
    "title": "Class Nonterminal | Grammarkdown API Reference",
    "keywords": "Class Nonterminal Package : grammarkdown Represents a non-terminal reference to another Production. IdentifierReference[~Yield, ~Await] Inheritance OptionalSymbolBase < SyntaxKind.Nonterminal > Nonterminal Constructors constructor(name, argumentList, questionToken) Constructs a new instance of the Nonterminal class Declaration constructor(name: Identifier, argumentList: ArgumentList | undefined, questionToken: Token<SyntaxKind.QuestionToken> | undefined); Parameters name Identifier argumentList ArgumentList | undefined questionToken Token < SyntaxKind.QuestionToken > | undefined Properties argumentList Declaration readonly argumentList: ArgumentList | undefined; Property Value ArgumentList | undefined edgeCount Declaration protected get edgeCount(): number; Property Value number firstChild Declaration get firstChild(): Node | undefined; Property Value Node | undefined lastChild Declaration get lastChild(): Node | undefined; Property Value Node | undefined name Declaration readonly name: Identifier; Property Value Identifier Methods accept(visitor) Declaration protected accept(visitor: NodeVisitor): Nonterminal; Parameters visitor NodeVisitor Returns Nonterminal children() Declaration children(): IterableIterator<Node>; Returns IterableIterator < Node > edgeName(offset) Declaration protected edgeName(offset: number): string | undefined; Parameters offset number Returns string | undefined edgeValue(offset) Declaration protected edgeValue(offset: number): Node | ReadonlyArray<Node> | undefined; Parameters offset number Returns Node | ReadonlyArray < Node > | undefined forEachChild(cbNode) Declaration forEachChild<T>(cbNode: (node: Node) => T | undefined): T | undefined; Type Parameters T Parameters cbNode (node: Node ) => T | undefined Returns T | undefined update(name, argumentList) Declaration update(name: Identifier, argumentList: ArgumentList | undefined): Nonterminal; Parameters name Identifier argumentList ArgumentList | undefined Returns Nonterminal"
  },
  "api/grammarkdown/nosymbolhereassertion.html": {
    "href": "api/grammarkdown/nosymbolhereassertion.html",
    "title": "Class NoSymbolHereAssertion | Grammarkdown API Reference",
    "keywords": "Class NoSymbolHereAssertion Package : grammarkdown Represents a no Symbol here assertion, which disallows the provided symbol. [no LineTerminator here] Inheritance AssertionBase < SyntaxKind.NoSymbolHereAssertion , SyntaxKind.OpenBracketToken > NoSymbolHereAssertion Constructors constructor(openBracketToken, noKeyword, symbols, hereKeyword, closeBracketToken) Constructs a new instance of the NoSymbolHereAssertion class Declaration constructor(openBracketToken: Token<SyntaxKind.OpenBracketToken>, noKeyword: Token<SyntaxKind.NoKeyword>, symbols: ReadonlyArray<PrimarySymbol> | undefined, hereKeyword: Token<SyntaxKind.HereKeyword> | undefined, closeBracketToken: Token<SyntaxKind.CloseBracketToken> | undefined); Parameters openBracketToken Token < SyntaxKind.OpenBracketToken > noKeyword Token < SyntaxKind.NoKeyword > symbols ReadonlyArray < PrimarySymbol > | undefined hereKeyword Token < SyntaxKind.HereKeyword > | undefined closeBracketToken Token < SyntaxKind.CloseBracketToken > | undefined Properties edgeCount Declaration protected get edgeCount(): number; Property Value number hereKeyword Declaration readonly hereKeyword: Token<SyntaxKind.HereKeyword> | undefined; Property Value Token < SyntaxKind.HereKeyword > | undefined lastChild Declaration get lastChild(): Node | undefined; Property Value Node | undefined noKeyword Declaration readonly noKeyword: Token<SyntaxKind.NoKeyword>; Property Value Token < SyntaxKind.NoKeyword > symbols Declaration readonly symbols: ReadonlyArray<PrimarySymbol> | undefined; Property Value ReadonlyArray < PrimarySymbol > | undefined Methods accept(visitor) Declaration protected accept(visitor: NodeVisitor): NoSymbolHereAssertion; Parameters visitor NodeVisitor Returns NoSymbolHereAssertion children() Declaration children(): IterableIterator<Node>; Returns IterableIterator < Node > edgeName(offset) Declaration protected edgeName(offset: number): string | undefined; Parameters offset number Returns string | undefined edgeValue(offset) Declaration protected edgeValue(offset: number): Node | ReadonlyArray<Node> | undefined; Parameters offset number Returns Node | ReadonlyArray < Node > | undefined forEachChild(cbNode) Declaration forEachChild<T>(cbNode: (node: Node) => T | undefined): T | undefined; Type Parameters T Parameters cbNode (node: Node ) => T | undefined Returns T | undefined update(symbols) Declaration update(symbols: ReadonlyArray<PrimarySymbol> | undefined): NoSymbolHereAssertion; Parameters symbols ReadonlyArray < PrimarySymbol > | undefined Returns NoSymbolHereAssertion"
  },
  "api/grammarkdown/nulldiagnosticmessages.html": {
    "href": "api/grammarkdown/nulldiagnosticmessages.html",
    "title": "Class NullDiagnosticMessages | Grammarkdown API Reference",
    "keywords": "Class NullDiagnosticMessages Package : grammarkdown Inheritance DiagnosticMessages NullDiagnosticMessages Properties instance Declaration static get instance(): NullDiagnosticMessages; Property Value NullDiagnosticMessages size Declaration get size(): number; Property Value number Methods copyFrom(other) Declaration copyFrom(other: DiagnosticMessages): void; Parameters other DiagnosticMessages Returns void report(pos, message, args) Declaration report(pos: number, message: Diagnostic, ...args: any[]): void; Parameters pos number message Diagnostic args any[] Returns void reportNode(sourceFile, node, message, args) Declaration reportNode(sourceFile: SourceFile | undefined, node: Node, message: Diagnostic, ...args: any[]): void; Parameters sourceFile SourceFile | undefined node Node message Diagnostic args any[] Returns void setSourceFile(sourceFile) Declaration setSourceFile(sourceFile: SourceFile): void; Parameters sourceFile SourceFile Returns void"
  },
  "api/grammarkdown/numberliteral.html": {
    "href": "api/grammarkdown/numberliteral.html",
    "title": "Class NumberLiteral | Grammarkdown API Reference",
    "keywords": "Class NumberLiteral Package : grammarkdown Represents a number literal (used by @line <!-- --> ) @line 500 Production :: Nonterminal Inheritance Node < SyntaxKind.NumberLiteral > NumberLiteral Constructors constructor(text) Constructs a new instance of the NumberLiteral class Declaration constructor(text: string | undefined); Parameters text string | undefined Properties text Declaration readonly text: string | undefined; Property Value string | undefined Methods accept(visitor) Declaration protected accept(visitor: NodeVisitor): NumberLiteral; Parameters visitor NodeVisitor Returns NumberLiteral"
  },
  "api/grammarkdown/oneoflist.html": {
    "href": "api/grammarkdown/oneoflist.html",
    "title": "Class OneOfList | Grammarkdown API Reference",
    "keywords": "Class OneOfList Package : grammarkdown Inheritance ProductionBodyBase < SyntaxKind.OneOfList > OneOfList Constructors constructor(oneKeyword, ofKeyword, indented, terminals) Constructs a new instance of the OneOfList class Declaration constructor(oneKeyword: Token<SyntaxKind.OneKeyword>, ofKeyword: Token<SyntaxKind.OfKeyword> | undefined, indented: boolean, terminals: ReadonlyArray<TerminalLiteral> | undefined); Parameters oneKeyword Token < SyntaxKind.OneKeyword > ofKeyword Token < SyntaxKind.OfKeyword > | undefined indented boolean terminals ReadonlyArray < TerminalLiteral > | undefined Properties edgeCount Declaration protected get edgeCount(): number; Property Value number firstChild Declaration get firstChild(): Node | undefined; Property Value Node | undefined indented Declaration readonly indented: boolean; Property Value boolean lastChild Declaration get lastChild(): Node | undefined; Property Value Node | undefined ofKeyword Declaration readonly ofKeyword: Token<SyntaxKind.OfKeyword> | undefined; Property Value Token < SyntaxKind.OfKeyword > | undefined oneKeyword Declaration readonly oneKeyword: Token<SyntaxKind.OneKeyword>; Property Value Token < SyntaxKind.OneKeyword > terminals Declaration readonly terminals: ReadonlyArray<TerminalLiteral> | undefined; Property Value ReadonlyArray < TerminalLiteral > | undefined Methods accept(visitor) Declaration protected accept(visitor: NodeVisitor): OneOfList; Parameters visitor NodeVisitor Returns OneOfList children() Declaration children(): IterableIterator<Node>; Returns IterableIterator < Node > edgeName(offset) Declaration protected edgeName(offset: number): string | undefined; Parameters offset number Returns string | undefined edgeValue(offset) Declaration protected edgeValue(offset: number): Node | ReadonlyArray<Node> | undefined; Parameters offset number Returns Node | ReadonlyArray < Node > | undefined forEachChild(cbNode) Declaration forEachChild<T>(cbNode: (node: Node) => T | undefined): T | undefined; Type Parameters T Parameters cbNode (node: Node ) => T | undefined Returns T | undefined update(terminals) Declaration update(terminals: ReadonlyArray<TerminalLiteral> | undefined): OneOfList; Parameters terminals ReadonlyArray < TerminalLiteral > | undefined Returns OneOfList"
  },
  "api/grammarkdown/oneofsymbol.html": {
    "href": "api/grammarkdown/oneofsymbol.html",
    "title": "Class OneOfSymbol | Grammarkdown API Reference",
    "keywords": "Class OneOfSymbol Package : grammarkdown Represents a set of symbols used to restrict a but not operator. A but not one of `a` or `b` Inheritance LexicalSymbolBase < SyntaxKind.OneOfSymbol > OneOfSymbol Constructors constructor(oneKeyword, ofKeyword, symbols) Constructs a new instance of the OneOfSymbol class Declaration constructor(oneKeyword: Token<SyntaxKind.OneKeyword>, ofKeyword: Token<SyntaxKind.OfKeyword> | undefined, symbols: ReadonlyArray<LexicalSymbol> | undefined); Parameters oneKeyword Token < SyntaxKind.OneKeyword > ofKeyword Token < SyntaxKind.OfKeyword > | undefined symbols ReadonlyArray < LexicalSymbol > | undefined Properties edgeCount Declaration protected get edgeCount(): number; Property Value number firstChild Declaration get firstChild(): Node | undefined; Property Value Node | undefined lastChild Declaration get lastChild(): Node | undefined; Property Value Node | undefined ofKeyword Declaration readonly ofKeyword: Token<SyntaxKind.OfKeyword> | undefined; Property Value Token < SyntaxKind.OfKeyword > | undefined oneKeyword Declaration readonly oneKeyword: Token<SyntaxKind.OneKeyword>; Property Value Token < SyntaxKind.OneKeyword > symbols Declaration readonly symbols: ReadonlyArray<LexicalSymbol> | undefined; Property Value ReadonlyArray < LexicalSymbol > | undefined Methods accept(visitor) Declaration protected accept(visitor: NodeVisitor): OneOfSymbol; Parameters visitor NodeVisitor Returns OneOfSymbol children() Declaration children(): IterableIterator<Node>; Returns IterableIterator < Node > edgeName(offset) Declaration protected edgeName(offset: number): string | undefined; Parameters offset number Returns string | undefined edgeValue(offset) Declaration protected edgeValue(offset: number): Node | ReadonlyArray<Node> | undefined; Parameters offset number Returns Node | ReadonlyArray < Node > | undefined forEachChild(cbNode) Declaration forEachChild<T>(cbNode: (node: Node) => T | undefined): T | undefined; Type Parameters T Parameters cbNode (node: Node ) => T | undefined Returns T | undefined update(symbols) Declaration update(symbols: ReadonlyArray<LexicalSymbol> | undefined): OneOfSymbol; Parameters symbols ReadonlyArray < LexicalSymbol > | undefined Returns OneOfSymbol"
  },
  "api/grammarkdown/optionalsymbolbase.html": {
    "href": "api/grammarkdown/optionalsymbolbase.html",
    "title": "Class OptionalSymbolBase | Grammarkdown API Reference",
    "keywords": "Class OptionalSymbolBase Package : grammarkdown Inheritance PrimarySymbolBase <TKind> OptionalSymbolBase Constructors constructor(kind, questionToken) Constructs a new instance of the OptionalSymbolBase class Declaration constructor(kind: TKind, questionToken: Token<SyntaxKind.QuestionToken> | undefined); Parameters kind TKind questionToken Token < SyntaxKind.QuestionToken > | undefined Properties questionToken Declaration readonly questionToken: Token<SyntaxKind.QuestionToken> | undefined; Property Value Token < SyntaxKind.QuestionToken > | undefined"
  },
  "api/grammarkdown/parameter.html": {
    "href": "api/grammarkdown/parameter.html",
    "title": "Class Parameter | Grammarkdown API Reference",
    "keywords": "Class Parameter Package : grammarkdown Inheritance Node < SyntaxKind.Parameter > Parameter Constructors constructor(name) Constructs a new instance of the Parameter class Declaration constructor(name: Identifier); Parameters name Identifier Properties edgeCount Declaration protected get edgeCount(): number; Property Value number firstChild Declaration get firstChild(): Node | undefined; Property Value Node | undefined lastChild Declaration get lastChild(): Node | undefined; Property Value Node | undefined name Declaration readonly name: Identifier; Property Value Identifier Methods accept(visitor) Declaration protected accept(visitor: NodeVisitor): Parameter; Parameters visitor NodeVisitor Returns Parameter children() Declaration children(): IterableIterator<Node>; Returns IterableIterator < Node > edgeName(offset) Declaration protected edgeName(offset: number): string | undefined; Parameters offset number Returns string | undefined edgeValue(offset) Declaration protected edgeValue(offset: number): Node | ReadonlyArray<Node> | undefined; Parameters offset number Returns Node | ReadonlyArray < Node > | undefined forEachChild(cbNode) Declaration forEachChild<T>(cbNode: (node: Node) => T | undefined): T | undefined; Type Parameters T Parameters cbNode (node: Node ) => T | undefined Returns T | undefined update(name) Declaration update(name: Identifier): Parameter; Parameters name Identifier Returns Parameter"
  },
  "api/grammarkdown/parameterlist.html": {
    "href": "api/grammarkdown/parameterlist.html",
    "title": "Class ParameterList | Grammarkdown API Reference",
    "keywords": "Class ParameterList Package : grammarkdown Inheritance Node < SyntaxKind.ParameterList > ParameterList Constructors constructor(openParenToken, elements, closeParenToken) Constructs a new instance of the ParameterList class Declaration constructor(openParenToken: Token<SyntaxKind.OpenBracketToken>, elements: ReadonlyArray<Parameter> | undefined, closeParenToken: Token<SyntaxKind.CloseBracketToken> | undefined); Parameters openParenToken Token < SyntaxKind.OpenBracketToken > elements ReadonlyArray < Parameter > | undefined closeParenToken Token < SyntaxKind.CloseBracketToken > | undefined Properties closeBracketToken Declaration readonly closeBracketToken: Token<SyntaxKind.CloseBracketToken> | undefined; Property Value Token < SyntaxKind.CloseBracketToken > | undefined edgeCount Declaration protected get edgeCount(): number; Property Value number elements Declaration readonly elements: ReadonlyArray<Parameter> | undefined; Property Value ReadonlyArray < Parameter > | undefined firstChild Declaration get firstChild(): Node | undefined; Property Value Node | undefined lastChild Declaration get lastChild(): Node | undefined; Property Value Node | undefined openBracketToken Declaration readonly openBracketToken: Token<SyntaxKind.OpenBracketToken>; Property Value Token < SyntaxKind.OpenBracketToken > Methods accept(visitor) Declaration protected accept(visitor: NodeVisitor): ParameterList; Parameters visitor NodeVisitor Returns ParameterList children() Declaration children(): IterableIterator<Node>; Returns IterableIterator < Node > edgeName(offset) Declaration protected edgeName(offset: number): string | undefined; Parameters offset number Returns string | undefined edgeValue(offset) Declaration protected edgeValue(offset: number): Node | ReadonlyArray<Node> | undefined; Parameters offset number Returns Node | ReadonlyArray < Node > | undefined forEachChild(cbNode) Declaration forEachChild<T>(cbNode: (node: Node) => T | undefined): T | undefined; Type Parameters T Parameters cbNode (node: Node ) => T | undefined Returns T | undefined update(elements) Declaration update(elements: ReadonlyArray<Parameter> | undefined): ParameterList; Parameters elements ReadonlyArray < Parameter > | undefined Returns ParameterList"
  },
  "api/grammarkdown/parser.html": {
    "href": "api/grammarkdown/parser.html",
    "title": "Class Parser | Grammarkdown API Reference",
    "keywords": "Class Parser Package : grammarkdown Methods parseSourceFile(filename, text, cancelable) Declaration parseSourceFile(filename: string, text: string, cancelable?: Cancelable): SourceFile; Parameters filename string text string cancelable Cancelable Returns SourceFile"
  },
  "api/grammarkdown/placeholdersymbol.html": {
    "href": "api/grammarkdown/placeholdersymbol.html",
    "title": "Class PlaceholderSymbol | Grammarkdown API Reference",
    "keywords": "Class PlaceholderSymbol Package : grammarkdown Represents a placeholder symbol ( @ <!-- --> ) used in some grammars. Inheritance LexicalSymbolBase < SyntaxKind.PlaceholderSymbol > PlaceholderSymbol Constructors constructor(placeholderToken) Constructs a new instance of the PlaceholderSymbol class Declaration constructor(placeholderToken: Token<SyntaxKind.AtToken>); Parameters placeholderToken Token < SyntaxKind.AtToken > Properties edgeCount Declaration protected get edgeCount(): number; Property Value number firstChild Declaration get firstChild(): Node | undefined; Property Value Node | undefined lastChild Declaration get lastChild(): Node | undefined; Property Value Node | undefined placeholderToken Declaration readonly placeholderToken: Token<SyntaxKind.AtToken>; Property Value Token < SyntaxKind.AtToken > Methods accept(visitor) Declaration protected accept(visitor: NodeVisitor): PlaceholderSymbol; Parameters visitor NodeVisitor Returns PlaceholderSymbol children() Declaration children(): IterableIterator<Node>; Returns IterableIterator < Node > edgeName(offset) Declaration protected edgeName(offset: number): string | undefined; Parameters offset number Returns string | undefined edgeValue(offset) Declaration protected edgeValue(offset: number): Node | ReadonlyArray<Node> | undefined; Parameters offset number Returns Node | ReadonlyArray < Node > | undefined forEachChild(cbNode) Declaration forEachChild<T>(cbNode: (node: Node) => T | undefined): T | undefined; Type Parameters T Parameters cbNode (node: Node ) => T | undefined Returns T | undefined"
  },
  "api/grammarkdown/position-interface.html": {
    "href": "api/grammarkdown/position-interface.html",
    "title": "Interface Position | Grammarkdown API Reference",
    "keywords": "Interface Position Package : grammarkdown Properties character Declaration readonly character: number; Property Value number line Declaration readonly line: number; Property Value number"
  },
  "api/grammarkdown/position-namespace.html": {
    "href": "api/grammarkdown/position-namespace.html",
    "title": "Namespace Position | Grammarkdown API Reference",
    "keywords": "Namespace Position Package : grammarkdown Functions clone(position) Declaration function clone(position: Position): Position; Parameters position Position Returns Position compare(left, right) Declaration function compare(left: Position, right: Position): 0 | 1 | -1; Parameters left Position right Position Returns 0 | 1 | -1 create(line, character) Declaration function create(line: number, character: number): Position; Parameters line number character number Returns Position equals(left, right) Declaration function equals(left: Position, right: Position): boolean; Parameters left Position right Position Returns boolean"
  },
  "api/grammarkdown/primarysymbolbase.html": {
    "href": "api/grammarkdown/primarysymbolbase.html",
    "title": "Class PrimarySymbolBase | Grammarkdown API Reference",
    "keywords": "Class PrimarySymbolBase Package : grammarkdown Inheritance LexicalSymbolBase <TKind> PrimarySymbolBase"
  },
  "api/grammarkdown/production.html": {
    "href": "api/grammarkdown/production.html",
    "title": "Class Production | Grammarkdown API Reference",
    "keywords": "Class Production Package : grammarkdown Inheritance SourceElementBase < SyntaxKind.Production > Production Constructors constructor(name, parameterList, colonToken, body) Constructs a new instance of the Production class Declaration constructor(name: Identifier, parameterList: ParameterList | undefined, colonToken: Token<ProductionSeperatorKind> | undefined, body: ProductionBody | undefined); Parameters name Identifier parameterList ParameterList | undefined colonToken Token < ProductionSeperatorKind > | undefined body ProductionBody | undefined Properties body Declaration readonly body: ProductionBody | undefined; Property Value ProductionBody | undefined colonToken Declaration readonly colonToken: Token<ProductionSeperatorKind> | undefined; Property Value Token < ProductionSeperatorKind > | undefined edgeCount Declaration protected get edgeCount(): number; Property Value number firstChild Declaration get firstChild(): Node | undefined; Property Value Node | undefined lastChild Declaration get lastChild(): Node | undefined; Property Value Node | undefined name Declaration readonly name: Identifier; Property Value Identifier parameterList Declaration readonly parameterList: ParameterList | undefined; Property Value ParameterList | undefined Methods accept(visitor) Declaration protected accept(visitor: NodeVisitor): Production; Parameters visitor NodeVisitor Returns Production children() Declaration children(): IterableIterator<Node>; Returns IterableIterator < Node > edgeName(offset) Declaration protected edgeName(offset: number): string | undefined; Parameters offset number Returns string | undefined edgeValue(offset) Declaration protected edgeValue(offset: number): Node | ReadonlyArray<Node> | undefined; Parameters offset number Returns Node | ReadonlyArray < Node > | undefined forEachChild(cbNode) Declaration forEachChild<T>(cbNode: (node: Node) => T | undefined): T | undefined; Type Parameters T Parameters cbNode (node: Node ) => T | undefined Returns T | undefined update(name, parameterList, body) Declaration update(name: Identifier, parameterList: ParameterList | undefined, body: ProductionBody | undefined): Production; Parameters name Identifier parameterList ParameterList | undefined body ProductionBody | undefined Returns Production"
  },
  "api/grammarkdown/productionbodybase.html": {
    "href": "api/grammarkdown/productionbodybase.html",
    "title": "Class ProductionBodyBase | Grammarkdown API Reference",
    "keywords": "Class ProductionBodyBase Package : grammarkdown Inheritance Node <TKind> ProductionBodyBase"
  },
  "api/grammarkdown/prose.html": {
    "href": "api/grammarkdown/prose.html",
    "title": "Class Prose | Grammarkdown API Reference",
    "keywords": "Class Prose Package : grammarkdown Represents a section of Prose, which indicates handling of syntax outside the scope of the Grammarkdown parser. > This is a section of Prose with |Nonterminals| and `terminals` Inheritance LexicalSymbolBase < SyntaxKind.Prose > Prose Constructors constructor(greaterThanToken, fragments) Constructs a new instance of the Prose class Declaration constructor(greaterThanToken: Token<SyntaxKind.GreaterThanToken>, fragments: ReadonlyArray<ProseFragment> | undefined); Parameters greaterThanToken Token < SyntaxKind.GreaterThanToken > fragments ReadonlyArray < ProseFragment > | undefined Properties edgeCount Declaration protected get edgeCount(): number; Property Value number firstChild Declaration get firstChild(): Node | undefined; Property Value Node | undefined fragments Declaration readonly fragments: ReadonlyArray<ProseFragment> | undefined; Property Value ReadonlyArray < ProseFragment > | undefined greaterThanToken Declaration readonly greaterThanToken: Token<SyntaxKind.GreaterThanToken>; Property Value Token < SyntaxKind.GreaterThanToken > lastChild Declaration get lastChild(): Node | undefined; Property Value Node | undefined Methods accept(visitor) Declaration protected accept(visitor: NodeVisitor): Prose; Parameters visitor NodeVisitor Returns Prose children() Declaration children(): IterableIterator<Node>; Returns IterableIterator < Node > edgeName(offset) Declaration protected edgeName(offset: number): string | undefined; Parameters offset number Returns string | undefined edgeValue(offset) Declaration protected edgeValue(offset: number): Node | ReadonlyArray<Node> | undefined; Parameters offset number Returns Node | ReadonlyArray < Node > | undefined forEachChild(cbNode) Declaration forEachChild<T>(cbNode: (node: Node) => T | undefined): T | undefined; Type Parameters T Parameters cbNode (node: Node ) => T | undefined Returns T | undefined update(fragments) Declaration update(fragments: ReadonlyArray<ProseFragment> | undefined): Prose; Parameters fragments ReadonlyArray < ProseFragment > | undefined Returns Prose"
  },
  "api/grammarkdown/proseassertion.html": {
    "href": "api/grammarkdown/proseassertion.html",
    "title": "Class ProseAssertion | Grammarkdown API Reference",
    "keywords": "Class ProseAssertion Package : grammarkdown Represents an assertion containing Prose, which indicates handling of syntax outside the scope of the Grammarkdown parser. HexDigits [> but only if MV of |HexDigits| > 0x10FFFF] Inheritance AssertionBase < SyntaxKind.ProseAssertion , SyntaxKind.OpenBracketGreaterThanToken > ProseAssertion Constructors constructor(openBracketToken, fragments, closeBracketToken) Constructs a new instance of the ProseAssertion class Declaration constructor(openBracketToken: Token<SyntaxKind.OpenBracketGreaterThanToken>, fragments: ReadonlyArray<ProseFragment> | undefined, closeBracketToken: Token<SyntaxKind.CloseBracketToken> | undefined); Parameters openBracketToken Token < SyntaxKind.OpenBracketGreaterThanToken > fragments ReadonlyArray < ProseFragment > | undefined closeBracketToken Token < SyntaxKind.CloseBracketToken > | undefined Properties edgeCount Declaration protected get edgeCount(): number; Property Value number fragments Declaration readonly fragments: ReadonlyArray<ProseFragment> | undefined; Property Value ReadonlyArray < ProseFragment > | undefined lastChild Declaration get lastChild(): Node | undefined; Property Value Node | undefined Methods accept(visitor) Declaration protected accept(visitor: NodeVisitor): ProseAssertion; Parameters visitor NodeVisitor Returns ProseAssertion children() Declaration children(): IterableIterator<Node>; Returns IterableIterator < Node > edgeName(offset) Declaration protected edgeName(offset: number): string | undefined; Parameters offset number Returns string | undefined edgeValue(offset) Declaration protected edgeValue(offset: number): Node | ReadonlyArray<Node> | undefined; Parameters offset number Returns Node | ReadonlyArray < Node > | undefined forEachChild(cbNode) Declaration forEachChild<T>(cbNode: (node: Node) => T | undefined): T | undefined; Type Parameters T Parameters cbNode (node: Node ) => T | undefined Returns T | undefined update(fragments) Declaration update(fragments: ReadonlyArray<ProseFragment> | undefined): ProseAssertion; Parameters fragments ReadonlyArray < ProseFragment > | undefined Returns ProseAssertion"
  },
  "api/grammarkdown/prosefragmentliteral.html": {
    "href": "api/grammarkdown/prosefragmentliteral.html",
    "title": "Class ProseFragmentLiteral | Grammarkdown API Reference",
    "keywords": "Class ProseFragmentLiteral Package : grammarkdown Inheritance Node < SyntaxKind > ProseFragmentLiteral Constructors constructor(kind, text) Constructs a new instance of the ProseFragmentLiteral class Declaration constructor(kind: SyntaxKind, text: string | undefined); Parameters kind SyntaxKind text string | undefined Properties edgeCount Declaration protected get edgeCount(): number; Property Value number text Declaration readonly text: string | undefined; Property Value string | undefined Methods accept(visitor) Declaration protected accept(visitor: NodeVisitor): ProseFragmentLiteral<TKind>; Parameters visitor NodeVisitor Returns ProseFragmentLiteral <TKind> edgeName(_offset) Declaration protected edgeName(_offset: number): string | undefined; Parameters _offset number Returns string | undefined edgeValue(_offset) Declaration protected edgeValue(_offset: number): Node | ReadonlyArray<Node> | undefined; Parameters _offset number Returns Node | ReadonlyArray < Node > | undefined"
  },
  "api/grammarkdown/range-interface.html": {
    "href": "api/grammarkdown/range-interface.html",
    "title": "Interface Range | Grammarkdown API Reference",
    "keywords": "Interface Range Package : grammarkdown Properties end Declaration readonly end: Position; Property Value Position start Declaration readonly start: Position; Property Value Position"
  },
  "api/grammarkdown/range-namespace.html": {
    "href": "api/grammarkdown/range-namespace.html",
    "title": "Namespace Range | Grammarkdown API Reference",
    "keywords": "Namespace Range Package : grammarkdown Functions clone(range) Declaration function clone(range: Range): Range; Parameters range Range Returns Range collapseToEnd(range) Declaration function collapseToEnd(range: Range): Range; Parameters range Range Returns Range collapseToStart(range) Declaration function collapseToStart(range: Range): Range; Parameters range Range Returns Range contains(left, right) Declaration function contains(left: Range, right: Range): boolean; Parameters left Range right Range Returns boolean containsPosition(range, position) Declaration function containsPosition(range: Range, position: Position): boolean; Parameters range Range position Position Returns boolean create(start, end) Declaration function create(start: Position, end: Position): Range; Parameters start Position end Position Returns Range equals(left, right) Declaration function equals(left: Range, right: Range): boolean; Parameters left Range right Range Returns boolean intersects(left, right) Declaration function intersects(left: Range, right: Range): boolean; Parameters left Range right Range Returns boolean isCollapsed(range) Declaration function isCollapsed(range: Range): boolean; Parameters range Range Returns boolean"
  },
  "api/grammarkdown/resolver.html": {
    "href": "api/grammarkdown/resolver.html",
    "title": "Class Resolver | Grammarkdown API Reference",
    "keywords": "Class Resolver Package : grammarkdown Constructors constructor(bindings, lineOffsetMap) Constructs a new instance of the Resolver class Declaration constructor(bindings: BindingTable, lineOffsetMap?: LineOffsetMap); Parameters bindings BindingTable lineOffsetMap LineOffsetMap Properties bindings Declaration readonly bindings: BindingTable; Property Value BindingTable Methods createNavigator(node) Creates a NodeNavigator pointing at node <!-- --> . Returns undefined if node does not have a SourceFile as an ancestor. Declaration createNavigator(node: Node): NodeNavigator | undefined; Parameters node Node Returns NodeNavigator | undefined getDeclarations(node) Gets the declarations for the provided identifier. Declaration getDeclarations(node: Identifier): Declaration[]; Parameters node Identifier Returns Declaration [] getDeclarations(name, meaning, location) Gets the declarations for name at the provided location that have the given meaning <!-- --> . Declaration getDeclarations(name: string, meaning: SymbolKind.SourceFile, location: Node): SourceFile[]; Parameters name string meaning SourceFile location Node Returns SourceFile [] getDeclarations(name, meaning, location) Gets the declarations for name at the provided location that have the given meaning <!-- --> . Declaration getDeclarations(name: string, meaning: SymbolKind.Production, location: Node): Production[]; Parameters name string meaning Production location Node Returns Production [] getDeclarations(name, meaning, location) Gets the declarations for name at the provided location that have the given meaning <!-- --> . Declaration getDeclarations(name: string, meaning: SymbolKind.Parameter, location: Node): Parameter[]; Parameters name string meaning Parameter location Node Returns Parameter [] getDeclarations(name, meaning, location) Gets the declarations for name at the provided location that have the given meaning <!-- --> . Declaration getDeclarations(name: string, meaning: SymbolKind, location: Node): Declaration[]; Parameters name string meaning SymbolKind location Node Returns Declaration [] getEffectiveFilenameAtPosition(sourceFile, position) Gets the effective filename of a raw position within a source file, taking into account @line directives. Declaration getEffectiveFilenameAtPosition(sourceFile: SourceFile, position: Position): string; Parameters sourceFile SourceFile position Position Returns string getEffectivePosition(sourceFile, position) Gets the effective position of a raw position within a source file, taking into account @line directives. Declaration getEffectivePosition(sourceFile: SourceFile, position: Position): Position; Parameters sourceFile SourceFile position Position Returns Position getEffectiveRange(sourceFile, range) Gets the effective range of a raw range within a source file, taking into account @line directives. Declaration getEffectiveRange(sourceFile: SourceFile, range: Range): Range; Parameters sourceFile SourceFile range Range Returns Range getParent(node) Gets the parent Node for node <!-- --> . Declaration getParent(node: Node): Node | undefined; Parameters node Node Returns Node | undefined getProductionLinkId(node) Get the link id for the Production to which the provided node resolves. Declaration getProductionLinkId(node: Identifier): string | undefined; Parameters node Identifier Returns string | undefined getRawFilenameAtEffectivePosition(filename, position) Gets the filename of a parsed grammarkdown file for the provided effective filename and position, taking into account @line directives. Declaration getRawFilenameAtEffectivePosition(filename: string, position: Position): string | undefined; Parameters filename string position Position Returns string | undefined getRawPositionFromEffectivePosition(filename, position) Gets the position in a parsed grammarkdown file for the provided effective filename and position, taking into account @line directives. Declaration getRawPositionFromEffectivePosition(filename: string, position: Position): Position | undefined; Parameters filename string position Position Returns Position | undefined getRawRangeFromEffectiveRange(filename, range) Gets the range in a parsed grammarkdown file for the provided effective filename and position, taking into account @line directives. Declaration getRawRangeFromEffectiveRange(filename: string, range: Range): Range | undefined; Parameters filename string range Range Returns Range | undefined getReferences(node) Gets the references to the provided identifier. Declaration getReferences(node: Identifier): Node[]; Parameters node Identifier Returns Node [] getReferences(name, meaning, location) Gets the references to name at the provided location that have the given meaning <!-- --> . Declaration getReferences(name: string, meaning: SymbolKind, location: Node): Node[]; Parameters name string meaning SymbolKind location Node Returns Node [] getRightHandSideLinkId(node, includePrefix) Gets the right-hand-side link id for the provided RightHandSide <!-- --> . Declaration getRightHandSideLinkId(node: RightHandSide, includePrefix: boolean): string; Parameters node RightHandSide includePrefix boolean When true <!-- --> , prepends the production link id. Returns string getSourceFileOfNode(node) Gets the SourceFile of node <!-- --> , if it belongs to one. Declaration getSourceFileOfNode(node: Node): SourceFile | undefined; Parameters node Node Returns SourceFile | undefined getSymbolOfNode(node) Gets the Symbol for node <!-- --> , if it has one. Declaration getSymbolOfNode(node: Node | undefined): Symbol | undefined; Parameters node Node | undefined Returns Symbol | undefined resolveSymbol(location, name, meaning) Resolves a Symbol for the provided name at the given location that has the provided meaning <!-- --> . Declaration resolveSymbol(location: Node, name: string, meaning: SymbolKind): Symbol | undefined; Parameters location Node name string meaning SymbolKind Returns Symbol | undefined"
  },
  "api/grammarkdown/righthandside.html": {
    "href": "api/grammarkdown/righthandside.html",
    "title": "Class RightHandSide | Grammarkdown API Reference",
    "keywords": "Class RightHandSide Package : grammarkdown Inheritance ProductionBodyBase < SyntaxKind.RightHandSide > RightHandSide Constructors constructor(constraints, head, reference) Constructs a new instance of the RightHandSide class Declaration constructor(constraints: Constraints | undefined, head: SymbolSpan | undefined, reference: LinkReference | undefined); Parameters constraints Constraints | undefined head SymbolSpan | undefined reference LinkReference | undefined Properties constraints Declaration readonly constraints: Constraints | undefined; Property Value Constraints | undefined edgeCount Declaration protected get edgeCount(): number; Property Value number firstChild Declaration get firstChild(): Node | undefined; Property Value Node | undefined head Declaration readonly head: SymbolSpan | undefined; Property Value SymbolSpan | undefined lastChild Declaration get lastChild(): Node | undefined; Property Value Node | undefined reference Declaration readonly reference: LinkReference | undefined; Property Value LinkReference | undefined Methods accept(visitor) Declaration protected accept(visitor: NodeVisitor): RightHandSide; Parameters visitor NodeVisitor Returns RightHandSide children() Declaration children(): IterableIterator<Node>; Returns IterableIterator < Node > edgeName(offset) Declaration protected edgeName(offset: number): string | undefined; Parameters offset number Returns string | undefined edgeValue(offset) Declaration protected edgeValue(offset: number): Node | ReadonlyArray<Node> | undefined; Parameters offset number Returns Node | ReadonlyArray < Node > | undefined forEachChild(cbNode) Declaration forEachChild<T>(cbNode: (node: Node) => T | undefined): T | undefined; Type Parameters T Parameters cbNode (node: Node ) => T | undefined Returns T | undefined update(constraints, head, reference) Declaration update(constraints: Constraints | undefined, head: SymbolSpan | undefined, reference: LinkReference | undefined): RightHandSide; Parameters constraints Constraints | undefined head SymbolSpan | undefined reference LinkReference | undefined Returns RightHandSide"
  },
  "api/grammarkdown/righthandsidelist.html": {
    "href": "api/grammarkdown/righthandsidelist.html",
    "title": "Class RightHandSideList | Grammarkdown API Reference",
    "keywords": "Class RightHandSideList Package : grammarkdown Inheritance ProductionBodyBase < SyntaxKind.RightHandSideList > RightHandSideList Constructors constructor(elements) Constructs a new instance of the RightHandSideList class Declaration constructor(elements: ReadonlyArray<RightHandSide> | undefined); Parameters elements ReadonlyArray < RightHandSide > | undefined Properties edgeCount Declaration protected get edgeCount(): number; Property Value number elements Declaration readonly elements: ReadonlyArray<RightHandSide> | undefined; Property Value ReadonlyArray < RightHandSide > | undefined firstChild Declaration get firstChild(): Node | undefined; Property Value Node | undefined lastChild Declaration get lastChild(): Node | undefined; Property Value Node | undefined Methods accept(visitor) Declaration protected accept(visitor: NodeVisitor): RightHandSideList; Parameters visitor NodeVisitor Returns RightHandSideList children() Declaration children(): IterableIterator<Node>; Returns IterableIterator < Node > edgeName(offset) Declaration protected edgeName(offset: number): string | undefined; Parameters offset number Returns string | undefined edgeValue(offset) Declaration protected edgeValue(offset: number): Node | ReadonlyArray<Node> | undefined; Parameters offset number Returns Node | ReadonlyArray < Node > | undefined forEachChild(cbNode) Declaration forEachChild<T>(cbNode: (node: Node) => T | undefined): T | undefined; Type Parameters T Parameters cbNode (node: Node ) => T | undefined Returns T | undefined update(elements) Declaration update(elements: ReadonlyArray<RightHandSide> | undefined): RightHandSideList; Parameters elements ReadonlyArray < RightHandSide > | undefined Returns RightHandSideList"
  },
  "api/grammarkdown/scanner.html": {
    "href": "api/grammarkdown/scanner.html",
    "title": "Class Scanner | Grammarkdown API Reference",
    "keywords": "Class Scanner Package : grammarkdown Constructors constructor(filename, text, diagnostics, cancelable) Constructs a new instance of the Scanner class Declaration constructor(filename: string, text: string, diagnostics: DiagnosticMessages, cancelable?: Cancelable); Parameters filename string text string diagnostics DiagnosticMessages cancelable Cancelable Properties filename Declaration readonly filename: string; Property Value string text Declaration readonly text: string; Property Value string Methods getDiagnostics() Declaration getDiagnostics(): DiagnosticMessages; Returns DiagnosticMessages getHtmlTrivia() Declaration getHtmlTrivia(): Trivia[] | undefined; Returns Trivia [] | undefined getLen() Declaration getLen(): number; Returns number getPos() Declaration getPos(): number; Returns number getStartPos() Declaration getStartPos(): number; Returns number getToken() Declaration getToken(): SyntaxKind; Returns SyntaxKind getTokenIsUnterminated() Declaration getTokenIsUnterminated(): boolean; Returns boolean getTokenPos() Declaration getTokenPos(): number; Returns number getTokenText() Declaration getTokenText(): string; Returns string getTokenValue() Declaration getTokenValue(): string; Returns string getTrivia() Declaration getTrivia(): Trivia[] | undefined; Returns Trivia [] | undefined hasPrecedingBlankLine() Declaration hasPrecedingBlankLine(): boolean; Returns boolean hasPrecedingDedent() Declaration hasPrecedingDedent(): boolean; Returns boolean hasPrecedingIndent() Declaration hasPrecedingIndent(): boolean; Returns boolean hasPrecedingLineTerminator() Declaration hasPrecedingLineTerminator(): boolean; Returns boolean hasPrecedingNewLine() Declaration hasPrecedingNewLine(): boolean; Returns boolean isIndented() Declaration isIndented(): boolean; Returns boolean isLineContinuation() Declaration isLineContinuation(): boolean; Returns boolean resetIndent() Declaration resetIndent(): void; Returns void scan() Declaration scan(): SyntaxKind; Returns SyntaxKind scanRange(pos, cb) Declaration scanRange<T>(pos: number, cb: () => T): T; Type Parameters T Parameters pos number cb () => T Returns T speculate(callback, isLookahead) Declaration speculate<T>(callback: () => T, isLookahead: boolean): T; Type Parameters T Parameters callback () => T isLookahead boolean Returns T"
  },
  "api/grammarkdown/singlelinecommenttrivia.html": {
    "href": "api/grammarkdown/singlelinecommenttrivia.html",
    "title": "Class SingleLineCommentTrivia | Grammarkdown API Reference",
    "keywords": "Class SingleLineCommentTrivia Package : grammarkdown Represent a single-line comment trivia token. // comment Inheritance CommentTriviaBase < SyntaxKind.SingleLineCommentTrivia > SingleLineCommentTrivia Constructors constructor() Constructs a new instance of the SingleLineCommentTrivia class Declaration constructor();"
  },
  "api/grammarkdown/sourceelementbase.html": {
    "href": "api/grammarkdown/sourceelementbase.html",
    "title": "Class SourceElementBase | Grammarkdown API Reference",
    "keywords": "Class SourceElementBase Package : grammarkdown Inheritance Node <TKind> SourceElementBase"
  },
  "api/grammarkdown/sourcefile.html": {
    "href": "api/grammarkdown/sourcefile.html",
    "title": "Class SourceFile | Grammarkdown API Reference",
    "keywords": "Class SourceFile Package : grammarkdown Inheritance Node < SyntaxKind.SourceFile > SourceFile Constructors constructor(filename, text, elements) Constructs a new instance of the SourceFile class Declaration constructor(filename: string, text: string, elements: ReadonlyArray<SourceElement>); Parameters filename string text string elements ReadonlyArray < SourceElement > Properties edgeCount Declaration protected get edgeCount(): number; Property Value number elements Declaration readonly elements: ReadonlyArray<SourceElement>; Property Value ReadonlyArray < SourceElement > filename Declaration readonly filename: string; Property Value string firstChild Declaration get firstChild(): Node | undefined; Property Value Node | undefined imports Declaration get imports(): readonly string[] | undefined; Property Value readonly string[] | undefined lastChild Declaration get lastChild(): Node | undefined; Property Value Node | undefined lineMap Declaration readonly lineMap: LineMap; Property Value LineMap text Declaration readonly text: string; Property Value string Methods accept(visitor) Declaration protected accept(visitor: NodeVisitor): SourceFile; Parameters visitor NodeVisitor Returns SourceFile children() Declaration children(): IterableIterator<Node>; Returns IterableIterator < Node > edgeName(offset) Declaration protected edgeName(offset: number): string | undefined; Parameters offset number Returns string | undefined edgeValue(offset) Declaration protected edgeValue(offset: number): Node | ReadonlyArray<Node> | undefined; Parameters offset number Returns Node | ReadonlyArray < Node > | undefined forEachChild(cbNode) Declaration forEachChild<T>(cbNode: (node: Node) => T | undefined): T | undefined; Type Parameters T Parameters cbNode (node: Node ) => T | undefined Returns T | undefined update(elements) Declaration update(elements: ReadonlyArray<SourceElement>): SourceFile; Parameters elements ReadonlyArray < SourceElement > Returns SourceFile"
  },
  "api/grammarkdown/stringasynchost.html": {
    "href": "api/grammarkdown/stringasynchost.html",
    "title": "Class StringAsyncHost | Grammarkdown API Reference",
    "keywords": "Class StringAsyncHost Package : grammarkdown An implementation of a CoreAsyncHost to simplify creating a host for a single file. Inheritance CoreAsyncHost StringAsyncHost Constructors constructor(file, content, hostFallback) Constructs a new instance of the StringAsyncHost class Declaration constructor(file: string, content: PromiseLike<string> | string, hostFallback?: CoreAsyncHost); Parameters file string The file name for the content. content PromiseLike <string> | string The content of the file. hostFallback CoreAsyncHost An optional host to use as a fallback for operations not supported by this host. Properties content The content of the file. Declaration readonly content: PromiseLike<string> | string; Property Value PromiseLike <string> | string file The file name for the content. Declaration readonly file: string; Property Value string"
  },
  "api/grammarkdown/stringliteral.html": {
    "href": "api/grammarkdown/stringliteral.html",
    "title": "Class StringLiteral | Grammarkdown API Reference",
    "keywords": "Class StringLiteral Package : grammarkdown Represents a single- or double-quoted string literal (used by @import and @line <!-- --> ) @import \"file\" Inheritance Node < SyntaxKind.StringLiteral > StringLiteral Constructors constructor(text) Constructs a new instance of the StringLiteral class Declaration constructor(text: string | undefined); Parameters text string | undefined Properties text Declaration readonly text: string | undefined; Property Value string | undefined Methods accept(visitor) Declaration protected accept(visitor: NodeVisitor): StringLiteral; Parameters visitor NodeVisitor Returns StringLiteral"
  },
  "api/grammarkdown/stringwriter.html": {
    "href": "api/grammarkdown/stringwriter.html",
    "title": "Class StringWriter | Grammarkdown API Reference",
    "keywords": "Class StringWriter Package : grammarkdown Constructors constructor(eol) Constructs a new instance of the StringWriter class Declaration constructor(eol?: string); Parameters eol string Properties character Declaration get character(): number; Property Value number line Declaration get line(): number; Property Value number size Declaration get size(): number; Property Value number Methods clone() Declaration clone(): StringWriter; Returns StringWriter commitLine() Declaration commitLine(): void; Returns void dedent() Declaration dedent(): void; Returns void indent() Declaration indent(): void; Returns void toString() Declaration toString(): string; Returns string write(text) Declaration write(text?: string): void; Parameters text string Returns void writeln(text) Declaration writeln(text?: string): void; Parameters text string Returns void"
  },
  "api/grammarkdown/symbol.html": {
    "href": "api/grammarkdown/symbol.html",
    "title": "Class Symbol | Grammarkdown API Reference",
    "keywords": "Class Symbol Package : grammarkdown Constructors constructor(kind, name) Constructs a new instance of the Symbol class Declaration constructor(kind: SymbolKind, name: string); Parameters kind SymbolKind name string Properties id Declaration id: number; Property Value number kind Declaration kind: SymbolKind; Property Value SymbolKind locals Declaration locals: SymbolTable | undefined; Property Value SymbolTable | undefined name Declaration name: string; Property Value string parent Declaration parent: Symbol | undefined; Property Value Symbol | undefined"
  },
  "api/grammarkdown/symbolkind.html": {
    "href": "api/grammarkdown/symbolkind.html",
    "title": "Enum SymbolKind | Grammarkdown API Reference",
    "keywords": "Enum SymbolKind Package : grammarkdown Fields Name Value Description Parameter 2 Production 1 SourceFile 0"
  },
  "api/grammarkdown/symbolset.html": {
    "href": "api/grammarkdown/symbolset.html",
    "title": "Class SymbolSet | Grammarkdown API Reference",
    "keywords": "Class SymbolSet Package : grammarkdown Represents a set of symbols in a lookahead assertion. [lookahead ∈ { `a`, `b` }] Inheritance Node < SyntaxKind.SymbolSet > SymbolSet Constructors constructor(openBraceToken, elements, closeBraceToken) Constructs a new instance of the SymbolSet class Declaration constructor(openBraceToken: Token<SyntaxKind.OpenBraceToken>, elements: ReadonlyArray<SymbolSpan> | undefined, closeBraceToken: Token<SyntaxKind.CloseBraceToken> | undefined); Parameters openBraceToken Token < SyntaxKind.OpenBraceToken > elements ReadonlyArray < SymbolSpan > | undefined closeBraceToken Token < SyntaxKind.CloseBraceToken > | undefined Properties closeBraceToken Declaration readonly closeBraceToken: Token<SyntaxKind.CloseBraceToken> | undefined; Property Value Token < SyntaxKind.CloseBraceToken > | undefined edgeCount Declaration protected get edgeCount(): number; Property Value number elements Declaration readonly elements: ReadonlyArray<SymbolSpan> | undefined; Property Value ReadonlyArray < SymbolSpan > | undefined firstChild Declaration get firstChild(): Node | undefined; Property Value Node | undefined lastChild Declaration get lastChild(): Node | undefined; Property Value Node | undefined openBraceToken Declaration readonly openBraceToken: Token<SyntaxKind.OpenBraceToken>; Property Value Token < SyntaxKind.OpenBraceToken > Methods accept(visitor) Declaration protected accept(visitor: NodeVisitor): SymbolSet; Parameters visitor NodeVisitor Returns SymbolSet children() Declaration children(): IterableIterator<Node>; Returns IterableIterator < Node > edgeName(offset) Declaration protected edgeName(offset: number): string | undefined; Parameters offset number Returns string | undefined edgeValue(offset) Declaration protected edgeValue(offset: number): Node | ReadonlyArray<Node> | undefined; Parameters offset number Returns Node | ReadonlyArray < Node > | undefined forEachChild(cbNode) Declaration forEachChild<T>(cbNode: (node: Node) => T | undefined): T | undefined; Type Parameters T Parameters cbNode (node: Node ) => T | undefined Returns T | undefined update(elements) Declaration update(elements: ReadonlyArray<SymbolSpan> | undefined): SymbolSet; Parameters elements ReadonlyArray < SymbolSpan > | undefined Returns SymbolSet"
  },
  "api/grammarkdown/symbolspan.html": {
    "href": "api/grammarkdown/symbolspan.html",
    "title": "Class SymbolSpan | Grammarkdown API Reference",
    "keywords": "Class SymbolSpan Package : grammarkdown Inheritance Node < SyntaxKind.SymbolSpan > SymbolSpan Constructors constructor(symbol, next) Constructs a new instance of the SymbolSpan class Declaration constructor(symbol: LexicalSymbol, next: SymbolSpan | undefined); Parameters symbol LexicalSymbol next SymbolSpan | undefined Properties edgeCount Declaration protected get edgeCount(): number; Property Value number firstChild Declaration get firstChild(): Node | undefined; Property Value Node | undefined lastChild Declaration get lastChild(): Node | undefined; Property Value Node | undefined next Declaration readonly next: SymbolSpan | undefined; Property Value SymbolSpan | undefined symbol Declaration readonly symbol: LexicalSymbol; Property Value LexicalSymbol Methods accept(visitor) Declaration protected accept(visitor: NodeVisitor): SymbolSpan; Parameters visitor NodeVisitor Returns SymbolSpan children() Declaration children(): IterableIterator<Node>; Returns IterableIterator < Node > edgeName(offset) Declaration protected edgeName(offset: number): string | undefined; Parameters offset number Returns string | undefined edgeValue(offset) Declaration protected edgeValue(offset: number): Node | ReadonlyArray<Node> | undefined; Parameters offset number Returns Node | ReadonlyArray < Node > | undefined forEachChild(cbNode) Declaration forEachChild<T>(cbNode: (node: Node) => T | undefined): T | undefined; Type Parameters T Parameters cbNode (node: Node ) => T | undefined Returns T | undefined update(symbol, next) Declaration update(symbol: LexicalSymbol, next: SymbolSpan | undefined): SymbolSpan; Parameters symbol LexicalSymbol next SymbolSpan | undefined Returns SymbolSpan"
  },
  "api/grammarkdown/symboltable.html": {
    "href": "api/grammarkdown/symboltable.html",
    "title": "Class SymbolTable | Grammarkdown API Reference",
    "keywords": "Class SymbolTable Package : grammarkdown Properties isEmpty Declaration get isEmpty(): boolean; Property Value boolean Methods resolveSymbol(name, kind) Declaration resolveSymbol(name: string, kind: SymbolKind): Symbol | undefined; Parameters name string kind SymbolKind Returns Symbol | undefined symbolsOfKind(kind) Declaration symbolsOfKind(kind: SymbolKind): Generator<Symbol, void, undefined>; Parameters kind SymbolKind Returns Generator < Symbol , void, undefined>"
  },
  "api/grammarkdown/syntaxkind.html": {
    "href": "api/grammarkdown/syntaxkind.html",
    "title": "Enum SyntaxKind | Grammarkdown API Reference",
    "keywords": "Enum SyntaxKind Package : grammarkdown Fields Name Value Description Argument 65 ArgumentList 66 AtToken 7 ButKeyword 31 ButNotSymbol 74 CloseBraceToken 9 CloseBracketToken 12 CloseParenToken 15 ColonColonColonToken 18 ColonColonToken 17 ColonToken 16 CommaToken 19 Constraints 71 DefaultKeyword 33 Define 60 DefineKeyword 32 ElementOfToken 29 EmptyAssertion 81 EmptyKeyword 34 EndOfFileToken 6 EqualsEqualsToken 24 EqualsToken 23 ExclamationEqualsToken 25 FalseKeyword 35 FirstCommentTrivia 1 FirstErrorNode 86 FirstHtmlTagTrivia 4 FirstHtmlTrivia 3 FirstKeyword 31 FirstLiteral 49 FirstProseFragmentLiteral 53 FirstPunctuation 7 FirstTextContent 49 FirstToken 6 FirstTrivia 1 GoalKeyword 36 GreaterThanToken 13 HereKeyword 37 HtmlCloseTagTrivia 5 HtmlCommentTrivia 3 HtmlOpenTagTrivia 4 Identifier 57 Import 59 ImportKeyword 38 InvalidAssertion 87 InvalidSymbol 86 LastCommentTrivia 2 LastErrorNode 87 LastHtmlTagTrivia 5 LastHtmlTrivia 5 LastKeyword 48 LastLiteral 52 LastProseFragmentLiteral 56 LastPunctuation 30 LastTextContent 57 LastToken 48 LastTrivia 5 LessThanExclamationToken 26 LessThanMinusToken 27 LexicalGoalAssertion 83 LexicalKeyword 39 Line 61 LineKeyword 40 LinkReference 67 LookaheadAssertion 82 LookaheadKeyword 41 MultiLineCommentTrivia 2 NoKeyword 42 Nonterminal 78 NoSymbolHereAssertion 84 NotAnElementOfToken 30 NotEqualToToken 28 NotKeyword 43 NumberLiteral 50 OfKeyword 44 OneKeyword 45 OneOfList 68 OneOfSymbol 76 OpenBraceToken 8 OpenBracketGreaterThanToken 11 OpenBracketToken 10 OpenParenToken 14 OrKeyword 46 Parameter 63 ParameterList 64 PlaceholderSymbol 77 PlusToken 20 Production 62 Prose 80 ProseAssertion 85 ProseFull 56 ProseHead 53 ProseMiddle 54 ProseTail 55 QuestionToken 22 RightHandSide 70 RightHandSideList 69 SingleLineCommentTrivia 1 SourceFile 58 StringLiteral 49 SymbolSet 73 SymbolSpan 72 Terminal 79 TerminalLiteral 51 ThroughKeyword 47 TildeToken 21 TrueKeyword 48 UnicodeCharacterLiteral 52 UnicodeCharacterRange 75 Unknown 0"
  },
  "api/grammarkdown/terminal.html": {
    "href": "api/grammarkdown/terminal.html",
    "title": "Class Terminal | Grammarkdown API Reference",
    "keywords": "Class Terminal Package : grammarkdown Represents a terminal token in the grammar. `yield` `*`? Inheritance OptionalSymbolBase < SyntaxKind.Terminal > Terminal Constructors constructor(literal, questionToken) Constructs a new instance of the Terminal class Declaration constructor(literal: UnicodeCharacterLiteral | TerminalLiteral, questionToken: Token<SyntaxKind.QuestionToken> | undefined); Parameters literal UnicodeCharacterLiteral | TerminalLiteral questionToken Token < SyntaxKind.QuestionToken > | undefined Properties edgeCount Declaration protected get edgeCount(): number; Property Value number firstChild Declaration get firstChild(): Node | undefined; Property Value Node | undefined lastChild Declaration get lastChild(): Node | undefined; Property Value Node | undefined literal Declaration readonly literal: UnicodeCharacterLiteral | TerminalLiteral; Property Value UnicodeCharacterLiteral | TerminalLiteral Methods accept(visitor) Declaration protected accept(visitor: NodeVisitor): Terminal; Parameters visitor NodeVisitor Returns Terminal children() Declaration children(): IterableIterator<Node>; Returns IterableIterator < Node > edgeName(offset) Declaration protected edgeName(offset: number): string | undefined; Parameters offset number Returns string | undefined edgeValue(offset) Declaration protected edgeValue(offset: number): Node | ReadonlyArray<Node> | undefined; Parameters offset number Returns Node | ReadonlyArray < Node > | undefined forEachChild(cbNode) Declaration forEachChild<T>(cbNode: (node: Node) => T | undefined): T | undefined; Type Parameters T Parameters cbNode (node: Node ) => T | undefined Returns T | undefined update(literal, questionToken) Declaration update(literal: UnicodeCharacterLiteral | TerminalLiteral, questionToken: Token<SyntaxKind.QuestionToken> | undefined): Terminal; Parameters literal UnicodeCharacterLiteral | TerminalLiteral questionToken Token < SyntaxKind.QuestionToken > | undefined Returns Terminal"
  },
  "api/grammarkdown/terminalliteral.html": {
    "href": "api/grammarkdown/terminalliteral.html",
    "title": "Class TerminalLiteral | Grammarkdown API Reference",
    "keywords": "Class TerminalLiteral Package : grammarkdown Represents a terminal token in the grammar. `yield` Inheritance Node < SyntaxKind.TerminalLiteral > TerminalLiteral Constructors constructor(text) Constructs a new instance of the TerminalLiteral class Declaration constructor(text: string | undefined); Parameters text string | undefined Properties text Declaration readonly text: string | undefined; Property Value string | undefined Methods accept(visitor) Declaration protected accept(visitor: NodeVisitor): TerminalLiteral; Parameters visitor NodeVisitor Returns TerminalLiteral"
  },
  "api/grammarkdown/textchange-interface.html": {
    "href": "api/grammarkdown/textchange-interface.html",
    "title": "Interface TextChange | Grammarkdown API Reference",
    "keywords": "Interface TextChange Package : grammarkdown Properties range Declaration range: Range; Property Value Range text Declaration text: string; Property Value string"
  },
  "api/grammarkdown/textchange-namespace.html": {
    "href": "api/grammarkdown/textchange-namespace.html",
    "title": "Namespace TextChange | Grammarkdown API Reference",
    "keywords": "Namespace TextChange Package : grammarkdown Functions applyChange(originalText, change) Declaration function applyChange(originalText: string, change: TextChange): string; Parameters originalText string change TextChange Returns string clone(change) Declaration function clone(change: TextChange): { text: string; range: Range; }; Parameters change TextChange Returns { text: string; range: Range ; } create(text, range) Declaration function create(text: string, range: Range): { text: string; range: Range; }; Parameters text string range Range Returns { text: string; range: Range ; } isUnchanged(change) Declaration function isUnchanged(change: TextChange): boolean; Parameters change TextChange Returns boolean"
  },
  "api/grammarkdown/textcontent.html": {
    "href": "api/grammarkdown/textcontent.html",
    "title": "Interface TextContent | Grammarkdown API Reference",
    "keywords": "Interface TextContent Package : grammarkdown Properties text Declaration readonly text: string | undefined; Property Value string | undefined"
  },
  "api/grammarkdown/textrange.html": {
    "href": "api/grammarkdown/textrange.html",
    "title": "Interface TextRange | Grammarkdown API Reference",
    "keywords": "Interface TextRange Package : grammarkdown Properties end Declaration readonly end: number; Property Value number pos Declaration readonly pos: number; Property Value number"
  },
  "api/grammarkdown/token.html": {
    "href": "api/grammarkdown/token.html",
    "title": "Class Token | Grammarkdown API Reference",
    "keywords": "Class Token Package : grammarkdown Represents a token such as a keyword or operator. Inheritance Node <TKind> Token Methods accept(visitor) Declaration protected accept(visitor: NodeVisitor): Token<TKind>; Parameters visitor NodeVisitor Returns Token <TKind>"
  },
  "api/grammarkdown/triviabase.html": {
    "href": "api/grammarkdown/triviabase.html",
    "title": "Class TriviaBase | Grammarkdown API Reference",
    "keywords": "Class TriviaBase Package : grammarkdown Inheritance Node <TKind> TriviaBase Properties hasFollowingBlankLine Declaration get hasFollowingBlankLine(): boolean; Property Value boolean hasFollowingLineTerminator Declaration get hasFollowingLineTerminator(): boolean; Property Value boolean hasFollowingWhiteSpace Declaration get hasFollowingWhiteSpace(): boolean; Property Value boolean hasPrecedingBlankLine Declaration get hasPrecedingBlankLine(): boolean; Property Value boolean hasPrecedingLineTerminator Declaration get hasPrecedingLineTerminator(): boolean; Property Value boolean hasPrecedingWhiteSpace Declaration get hasPrecedingWhiteSpace(): boolean; Property Value boolean"
  },
  "api/grammarkdown/unicodecharacterliteral.html": {
    "href": "api/grammarkdown/unicodecharacterliteral.html",
    "title": "Class UnicodeCharacterLiteral | Grammarkdown API Reference",
    "keywords": "Class UnicodeCharacterLiteral Package : grammarkdown Represents a Unicode character literal in one of two forms: <TAB> U+0000 Inheritance Node < SyntaxKind.UnicodeCharacterLiteral > UnicodeCharacterLiteral Constructors constructor(text) Constructs a new instance of the UnicodeCharacterLiteral class Declaration constructor(text: string | undefined); Parameters text string | undefined Properties text Declaration readonly text: string | undefined; Property Value string | undefined Methods accept(visitor) Declaration protected accept(visitor: NodeVisitor): UnicodeCharacterLiteral; Parameters visitor NodeVisitor Returns UnicodeCharacterLiteral"
  },
  "api/grammarkdown/unicodecharacterrange.html": {
    "href": "api/grammarkdown/unicodecharacterrange.html",
    "title": "Class UnicodeCharacterRange | Grammarkdown API Reference",
    "keywords": "Class UnicodeCharacterRange Package : grammarkdown Represents a range of unicode characters. U+0000 through U+001F Inheritance LexicalSymbolBase < SyntaxKind.UnicodeCharacterRange > UnicodeCharacterRange Constructors constructor(left, throughKeyword, right) Constructs a new instance of the UnicodeCharacterRange class Declaration constructor(left: UnicodeCharacterLiteral, throughKeyword: Token<SyntaxKind.ThroughKeyword>, right: UnicodeCharacterLiteral); Parameters left UnicodeCharacterLiteral throughKeyword Token < SyntaxKind.ThroughKeyword > right UnicodeCharacterLiteral Properties edgeCount Declaration protected get edgeCount(): number; Property Value number firstChild Declaration get firstChild(): Node | undefined; Property Value Node | undefined lastChild Declaration get lastChild(): Node | undefined; Property Value Node | undefined left Declaration readonly left: UnicodeCharacterLiteral; Property Value UnicodeCharacterLiteral right Declaration readonly right: UnicodeCharacterLiteral; Property Value UnicodeCharacterLiteral throughKeyword Declaration readonly throughKeyword: Token<SyntaxKind.ThroughKeyword>; Property Value Token < SyntaxKind.ThroughKeyword > Methods accept(visitor) Declaration protected accept(visitor: NodeVisitor): UnicodeCharacterRange; Parameters visitor NodeVisitor Returns UnicodeCharacterRange children() Declaration children(): IterableIterator<Node>; Returns IterableIterator < Node > edgeName(offset) Declaration protected edgeName(offset: number): string | undefined; Parameters offset number Returns string | undefined edgeValue(offset) Declaration protected edgeValue(offset: number): Node | ReadonlyArray<Node> | undefined; Parameters offset number Returns Node | ReadonlyArray < Node > | undefined forEachChild(cbNode) Declaration forEachChild<T>(cbNode: (node: Node) => T | undefined): T | undefined; Type Parameters T Parameters cbNode (node: Node ) => T | undefined Returns T | undefined update(left, right) Declaration update(left: UnicodeCharacterLiteral, right: UnicodeCharacterLiteral): UnicodeCharacterRange; Parameters left UnicodeCharacterLiteral right UnicodeCharacterLiteral Returns UnicodeCharacterRange"
  },
  "api/hosts.html": {
    "href": "api/hosts.html",
    "title": "Host API | Grammarkdown API Reference",
    "keywords": "Host API The Host API provides the mechanism through which other Grammarkdown Service APIs can interact with the file system asynchronously. API operations using an asynchronous host use the native ECMAScript Promise to signal the completion of operations. Host Class Hierarchy CoreAsyncHost NodeAsyncHost StringAsyncHost"
  },
  "api/nodes.html": {
    "href": "api/nodes.html",
    "title": "Syntax Nodes | Grammarkdown API Reference",
    "keywords": "Syntax Nodes This section contains the various Nodes defined by the Grammarkdown language."
  },
  "api/parse.html": {
    "href": "api/parse.html",
    "title": "Parser API | Grammarkdown API Reference",
    "keywords": "Parser API This section contains the various services Grammarkdown uses to parse Grammarkdown syntax."
  },
  "index.html": {
    "href": "index.html",
    "title": "Overview | Grammarkdown API Reference",
    "keywords": "Grammarkdown grammarkdown is a markdown-style parser for syntactic grammars, designed to make it easily to rapidly prototype a grammar and statically verify its consistency. The grammar supported by grammarkdown is based on the parametric grammar used by ECMA-262 (the JavaScript language standard). Related ecmarkup"
  },
  "usage/cli.html": {
    "href": "usage/cli.html",
    "title": "Usage | Grammarkdown API Reference",
    "keywords": "Usage Syntax: grammarkdown [options] [...files] Examples: grammarkdown es6.grammar grammarkdown --out es6.md --format markdown es6.grammar Options: -f, --format FORMAT The output format. -h, --help Prints this message. --noChecks Does not perform static checking of the grammar. --noEmit Does not emit output. --noEmitOnError Does not emit output if there are errors. -o, --out FILE Specify the output file. -v, --version Prints the version."
  },
  "usage/syntax.html": {
    "href": "usage/syntax.html",
    "title": "Syntax | Grammarkdown API Reference",
    "keywords": "Syntax A grammarkdown grammar file uses significant whitespace in the form of line terminators and indentation. Tab (ASCII 0x9) characters are preferred, however using multiple spaces for indentation is supported as long as all nested elements have the same amount of leading whitespace. Productions A Production consists of a left-hand-side Nonterminal followed by a colon ( : ) separator and one or more right-hand-side sentences consisting of various forms of terminal and nonterminal symbols. For example: NameSpaceImport : `*` `as` ImportedBinding It is recommended that Productions should follow pascal-case naming conventions, to avoid collision with reserved keywords. You may specify multiple productions for a Nonterminal on multiple lines, as follows: NamedImports : `{` `}` NamedImports : `{` ImportList `}` NamedImports : `{` ImportList `,` `}` You may also specify multiple left-hand-side sentences for a single production by indenting them: NamedImports : `{` `}` `{` ImportList `}` `{` ImportList `,` `}` A Production may specify one or more parameters that can be used to reuse a Nonterminal in various circumstances: IdentifierReference[Yield] : Identifier [~Yield] `yield` A Production may also specify a limited set of terminals, by using the one of keyphrase: Keyword :: one of `break` `do` `in` `typeof` `case` `else` `instanceof` `var` `catch` `export` `new` `void` `class` `extends` `return` `while` `const` `finally` `super` `with` `continue` `for` `switch` `yield` `debugger` `function` `this` `default` `if` `throw` `delete` `import` `try` Parameters Productions in Grammarkdown can be parametric, allowing you to define syntax that can be conditionally modified by passing arguments. To pass an argument to a Production , you must provide the name of a Parameter in a bracketed argument list. Parameters are both positional and named, so to provide an argument you must supply the name of the argument along with one of the following prefixes: + - Indicates the named parameter is set in the referenced production. For example: +In ~ - Indicates the named parameter is unset in the referenced production. For example: ~Async ? - Indicates the current state of the named parameter is used in the referenced production. For example: ?Yield Declaration[Yield] : HoistableDeclaration[?Yield] ClassDeclaration[?Yield] LexicalDeclaration[+In, ?Yield] Right-Hand-Sides The right-hand-side of a Production consists of one or more Terminal or Nonterminal symbols, a sentence of Prose , or an Assertion . Terminals A Terminal symbol can be one of the following: A literal string of one or more characters enclosed in backticks ('`'). For example: `function` A sequence of three backtick characters, which denotes a backtick token. For example: ``` A unicode character literal enclosed in a leading less-than ('<') character and a trailing greater-than ('>') character. For example: <TAB> Nonterminals A Nonterminal symbol is an identifier, followed by an optional argument list, and an optional question mark ('?'). The question mark changes the cardinality of the Nonterminal from \"exactly one\" to \"zero or one\". The identifier may optionally be enclosed in | characters, if it happens to collide with a keyword. Character Literals and Ranges Character literals may be specified using one of the following forms: An abbreviation for a Unicode Code point, of the form <NBSP> A Unicode code point, of the form U+00A0 Character ranges may be specified using the through keyword: SourceCharacter but not one of `\"` or `\\` or U+0000 through U+001F Prose A sentence of Prose is a single line with a leading greater-than ('>') character. For example: > any Unicode code point The but not Condition The but not condition allows you to reference a production, excluding some part of that production. For example: MultiLineNotAsteriskChar :: SourceCharacter but not `*` Here, MultiLineNotAsteriskChar may contain any alternative from SourceCharacter , except the terminal `*` . The one of Condition You can exclude multiple alternatives by including a list of symbols to exclude through the use of the one of keyphrase. Each entry in the list is separated by or : MultiLineNotForwardSlashOrAsteriskChar :: SourceCharacter but not one of `/` or `*` Constraint A Constraint is a zero-width test at the start of a right-hand-side that indicates that the right-hand-side is only matched when the specified Parameter is either set (using the + prefix), or unset (using the ~ prefix). For example: [~Yield] `yield` Assertions An Assertion is a zero-width test that must evaluate successfully for the Production to be considered. Assertions are enclosed in a leading open bracket ('[') character and a trailing close-bracket (']') character. The possible assertions include: The empty assertion , which matches exactly zero tokens: [empty] The lookahead assertion , which verifies the next tokens in the stream: [lookahead != `function`] The no-symbol-here assertion , which verifies the next token is not the provided symbol: [no LineTerminator here] The lexical-goal assertion , which states that the current lexical goal is the supplied Nonterminal : [lexical goal InputElementRegExp] The prose assertion , which allows for arbitrary prose, mixed with terminals and nonterminals: [> prose text `terminal` prose text |NonTerminal| prose text] A lookahead assertion has the following operators: The == operator states the lookahead phrase is matched: [lookahead == `class`] The != operator states the lookahead phrase is not matched: [lookahead != `function`] The <- operator states that any matching phrase in the provided set is matched: [lookahead <- { `public`, `private` }] The <! operator states that any matching phrase in the provided set is not matched: [lookahead <! { `{`, `function` }] Linking During emit, grammarkdown implicitly adds a generated name for each Production and Right-hand side that can be used to link directly to the production using a URI fragment. You can explicitly set the name for a production by tagging it with a custom link name: Declaration[Yield] : HoistableDeclaration[?Yield] #declaration-hoistable ClassDeclaration[?Yield] #declaration-class LexicalDeclaration[In, ?Yield] #declaration-lexical Comments You can also annotate your grammar with C-style single-line and multi-line comments. @ -Directives Grammarkdown provides several directives for customizing the behavior of the grammar checker from within the grammar file itself: @import \"path\" - Import another grammar. @define <setting> <value> - Override a limited set of grammar options. setting can be: noStrictParametricProductions - Disables strict checking of parameters. noUnusedParameters - Determines whether to report errors when parameters are unused. value can be: true - Sets the provided setting to true . false - Sets the provided setting to false . default - Sets the provided setting to the value provided in the grammar options. @line <number> [\"path\"] or @line default - Changes the grammar checker to report errors using the provided line number and path, or resets line numbering to the current line number in the file. Examples For comprehensive examples of grammarkdown syntax and output, you can review the following samples: ECMA-262 version 2020 (ES2020) Grammar Plain-text HTML ECMA-262 version 2015 (ES6) Grammar Plain-text HTML TypeScript 1.5 Supplemental Grammar Plain-text HTML"
  }
}